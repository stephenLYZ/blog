<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen&#39;blog</title>
  <subtitle>Just do It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-10T09:40:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Stephen Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>［MUXI WiKi］页面性能优化</title>
    <link href="http://yoursite.com/2016/12/10/web-performance/"/>
    <id>http://yoursite.com/2016/12/10/web-performance/</id>
    <published>2016-12-10T09:36:11.000Z</published>
    <updated>2016-12-10T09:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><a href="#1">1. 前言</a></h3><ul>
<li><a href="#1.1">为什么要页面性能优化？</a></li>
<li><a href="#1.2">影响页面性能的因素有哪些？</a></li>
</ul>
<h3 id="2-性能优化手段"><a href="#2-性能优化手段" class="headerlink" title="2. 性能优化手段"></a><a href="#2">2. 性能优化手段</a></h3><h5 id="2-1-前端"><a href="#2-1-前端" class="headerlink" title="2.1 前端"></a><a href="#2.1">2.1 前端</a></h5><ul>
<li>页面结构</li>
<li>HTML代码优化</li>
<li>CSS代码优化</li>
<li>JS代码优化</li>
<li>图片优化</li>
<li>按需加载</li>
<li>减少DNS查询</li>
</ul>
<h5 id="2-2-后端"><a href="#2-2-后端" class="headerlink" title="2.2 后端"></a><a href="#2.2">2.2 后端</a></h5><ul>
<li>负载均衡</li>
<li>Cache</li>
</ul>
<h5 id="2-3-网络"><a href="#2-3-网络" class="headerlink" title="2.3 网络"></a><a href="#2.3">2.3 网络</a></h5><ul>
<li>减少请求数    </li>
<li>压缩打包</li>
<li>Gzip   </li>
<li>CDN </li>
<li>Keep-alive</li>
<li>避免重定向</li>
<li>使用 HTTP/2</li>
</ul>
<h3 id="3-性能分析工具"><a href="#3-性能分析工具" class="headerlink" title="3. 性能分析工具"></a><a href="#3">3. 性能分析工具</a></h3><ul>
<li><a href="#3.1">Chrome Timeline</a></li>
<li><a href="#3.2">WebPagetest</a></li>
<li><a href="#3.3">Google PageSpeed</a></li>
</ul>
<h3 id="4-相关资源推荐"><a href="#4-相关资源推荐" class="headerlink" title="4.相关资源推荐"></a><a href="#4">4.相关资源推荐</a></h3><hr>
<h3 id="1"> 1. 前言 </h3>

<p>在前端项目中，页面性能优化一直是一个比较庞大且复杂的问题，大部分前端工程师或许都思考过前端性能优化方面的问题，我们有<a href="http://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">yahoo</a>的35条黄金守则，以及两本很经典的性能优化指导书：《高性能网站建设指南》、《高性能网站建设进阶指南》。这些对于web性能优化至今都有非常重要的指导意义。  </p>
<h4 id="1.1"> 为什么要页面性能优化？ </h4>  

<p>首先我们看一张图：    </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/xingneng.png" alt="">    </p>
<p>可以看出，web性能对于用户体验有着非常重要的作用，页面响应速度越快，用户体验越好，有很多<a href="https://wpostats.com/tags/conversions/" target="_blank" rel="external">研究</a>支持这种说法。所以对于一个经验丰富的前端工程师来说，懂得性能优化是必不可少的技能之一。  </p>
<h4 id="1.2"> 影响页面性能的因素有哪些？ </h4>

<p>总体上说，在现有的web技术中，影响页面性能的因素主要有三个：  </p>
<p><img src="https://cloud.githubusercontent.com/assets/11830681/20918043/09f9c04a-bbd0-11e6-9ff0-ff325781ecce.png" alt="">  </p>
<p><code>Backend</code>: web服务器从数据库加载数据以及整合网站。<br><code>Network</code>: 网络延迟的时间，每个请求需要时间从客户端传输到服务器，并返回响应结果。当请求过多的时候，这一项尤为重要。<br><code>Frontend</code>: 前端设备渲染页面的时间。</p>
<p>接下来，就从这三方面来讲讲基本的优化手段。</p>
<h3 id="1"> 2. 性能优化手段 </h3>

<h4 id="2.1"> 前端 </h4>

<p>影响前端性能的主要因素是关键呈现路径，它描述了页面在浏览器生成的步骤：       </p>
<p><img src="https://cloud.githubusercontent.com/assets/11830681/20918045/09fe5308-bbd0-11e6-92df-124519faf9a3.jpg" alt="">  </p>
<p>每个步骤处理都非常简单，HTML转换成DOM，CSS转换成CSSOM，DOM和CSSOM结合生成RenderTree(包含每个节点的视觉信息)，然后生成布局(layout)，对RenderTree所有节点进行平面合成，最后再将布局paint到屏幕上。<br>可惜的是，影响性能的因素正是如何处理这几个步骤之间的依赖。比如加载CSS和构造CSSOM之前，页面是不能够显示的，Javascript更糟糕，由于它可以访问修改DOM和CSSOM，所以一旦发现HTML标记，DOM构造就是会停止，并且从服务器请求脚本，当所有CSS和CSSOM构造完后才会执行脚本，最终才能够把页面显示给用户。 </p>
<p>因此，前端页面优化根据以上主要有这些： </p>
<p><strong>页面结构:</strong><br>使用外链的css和js，将css放置在头部，js放置在尾部，防止阻塞尽早刷新文档的输出。</p>
<p><strong>HTML代码优化:</strong><br>避免空的图片src，精简DOM的层级，因为层级越少、数量越少，回流越快。以及让协议自适应，比如将<a href="https://和http://都替换成//。" target="_blank" rel="external">https://和http://都替换成//。</a> </p>
<p><strong>CSS代码优化:</strong><br>通过在<code>&lt;head&gt;</code>中内联“关键的CSS” ，剩下的CSS通过异步加载来改善页面渲染时间，来达到加快渲染不滚动时可见的网站部分（称为首屏）的目的。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"> <span class="comment">/* inline critical CSS */</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<p>主要通过这三个步骤来确定关键的CSS：</p>
<ul>
<li>查看页面viewport的大小</li>
<li>识别viewport中可见元素</li>
<li>选择这些元素关联的css放到内联</li>
</ul>
<p>如果用手工来完成是非常棘手的，幸好现在有比较好的工具: <a href="https://github.com/addyosmani/critical" target="_blank" rel="external">critical</a>。它能够非常适合的将明显位置的CSS内联，并且异步加载剩余的CSS，从而来提高你的页面加载速度。  </p>
<p><strong>JS代码优化:</strong><br>同样可以通过将“关键的JS”代码内联，其余异步加载来提高页面加载速度。除此之外，应该避免使用eval和with，减少DOM的访问（最好使用VirtualDOM）以及作用域链的查找。<br>减少Repaint（重绘）和Reflow（重排）最好通过批量更新元素减少重排次数，比如以下代码会造成三次页面重排:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.witdh = <span class="string">'100px'</span></div><div class="line">demo.height = <span class="string">'100px'</span></div><div class="line">demo.style.margin = <span class="string">'20px'</span></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"></div><div class="line">我们可以优化成:  </div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.classList.add(<span class="string">'style'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.style</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>移除重复代码，主要说的是一个页面中避免多次加入同一份代码，不过现在基本上有AMD、CMD、ES6 Module这种依赖管理方式，所以这种问题一般不会出现。</p>
<p><strong>图片优化:</strong><br>当页面图片大小小于2kb的时候可以使用base64编码来内联到页面或css中，现有的webpack、gulp都可以实现这个功能。<br>使用css sprite可以有效的减少请求数。<br>使用css、svg、canvas或iconfont代替图片。<br>极大化的压缩图片，这里推荐一个工具<a href="http://www.secaibi.com/tools/" target="_blank" rel="external">色彩笔</a> 。<br>除此之外，可以使用更好的压缩比图片格式比如webp、bpg、sharpP，这里借用google的一张图片格式选择方案:  </p>
<p><img src="http://tech-blog.oss-cn-hangzhou.aliyuncs.com/format-tree.png?_=5913318" alt=""></p>
<p><strong>按需加载:</strong><br>静态资源尤其是图片按需加载可以大大提高你的web性能。大体理念就是只有在需要的时候才加载资源，比如<a href="https://github.com/loktar00/react-lazy-load" target="_blank" rel="external">react-lazy-load</a>一个用react惰性加载图片的插件:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyComponent = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    Scroll to load images.</div><div class="line">    &lt;div className="filler" /&gt;</div><div class="line">    &lt;LazyLoad height=&#123;762&#125; offsetVertical=&#123;300&#125;&gt;</div><div class="line">      &lt;img src='http://example.png' /&gt;</div><div class="line">    &lt;/LazyLoad&gt;</div><div class="line">    (...)</div></pre></td></tr></table></figure>
<p>当你滚动到某个具体位置的时候，图片才加载出来。一个很好的例子是<a href="https://medium.com" target="_blank" rel="external">medium</a>这种图片模糊懒加载。  </p>
<p><strong>减少DNS查询:</strong>   </p>
<p>很多人习惯把静态资源放在不同域名下，然而DNS查询一般需要几毫秒到几百毫秒，移动环境下会更慢，所以减少DNS查询，可以打打提高页面加载速度。<br>当然你可以使用DNS Prefetch来对不同域的静态资源进行加载，比如淘宝：  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/taobao.png" alt=""></p>
<h4 id="2.2"> 后端 </h4>

<p><strong>负载均衡</strong><br>把负载分配到不同的服务器可以给用户提供更好的延迟时间，负载均衡就跟使用某个 round-robin（循环）解决方案一样简单，可以基于一个 <a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="external">nginx 反向代理</a>，或者基于一个成熟的分布式网络，比如 <a href="https://www.cloudflare.com" target="_blank" rel="external">Cloudflare</a> 或者 <a href="https://aws.amazon.com/cloudfront/" target="_blank" rel="external">Amazon CloudFront</a> 。</p>
<p><img src="https://pic2.zhimg.com/e9ea15eabac712a686d89ddaba854009_b.png" alt="">  </p>
<p><strong>Cache</strong><br>缓存利用可以包括添加 Expires 头，配置 ETag，使 Ajax 可缓存等，恰当的缓存可以减少HTTP请求以及节省带宽。</p>
<ul>
<li>配置 ETag：即If-None-Match: 上次 ETag 的内容。浏览器会发出请求询问服务端，资源是否过期；服务端发现,没有过期，直接返回一个状态码为 304、正文为空的响应，告知浏览器使用本地缓存；如果资源有更新，服务端返回状态码 200、Etag 和正文。这个过程被称之为 HTTP 的协商缓存，通常也叫做弱缓存。</li>
<li>添加 Expires 头：服务端通过响应头告诉浏览器，在什么时间之前（Expires）或在多长时间之内（Cache-Control: Max-age=xxx），不要再请求服务器了。这个机制我们通常称之为 HTTP 的强缓存。一般会对 CSS、JS、图片等资源使用强缓存，而入口文件（HTML）一般使用协商缓存或不缓存。</li>
<li>使用AppCache。AppCache主要利用manifest 文本文件，告知浏览器被缓存的内容以及不缓存的内容。</li>
<li>LocalStorage：用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li>
</ul>
<h4 id="2.3"> 网络 </h4>

<p>网络延迟是影响网络性能的最重要因素，初始浏览器请求的划分一般是这么几个阶段：    </p>
<p><img src="https://camo.githubusercontent.com/4ea35dd14d4f42dba5f3b2770480a35425f77c61/68747470733a2f2f63646e2d696d616765732d322e6d656469756d2e636f6d2f6d61782f313230302f312a59337577722d51384c2d4f5348337562586c2d4869412e74696666" alt=""> </p>
<p>首先当你在浏览器输入网址并按下回车后，浏览器开始使用 DNS 查找来识别与域相关联的 IP 地址。使用接收到的 IP 地址，浏览器初始化与服务器的 TCP 连接。在初始连接之后，浏览器发送实际请求并等待数据进入。第一个字节到达的时间主要取决于客户端和服务器之间的距离，包括服务器渲染页面所需的时间。最后一步是在可能的多次往返中下载资源（在这种情况下指的是 HTML）。</p>
<p>因此，我们可以根据以上来进行优化:  </p>
<p><strong>减少请求数</strong><br>使用CSS Sprite，合并JS和CSS文件（使用现有的构建工具<code>webpack</code>或者<code>gulp</code>），避免重复的资源请求</p>
<p><strong>压缩打包</strong><br>压缩文件大小可以减少请求的带宽，精简css、 JavaScript，移除注释、空格、重复css和脚本，压缩CSS、JS、图片，我们可以使用<code>webpack</code>来做这些事情:  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"Sample "</span> + i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; ++i) &#123;</div><div class="line">    insert(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打包后:  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">o</span>)</span>&#123;<span class="keyword">if</span>(e[o])<span class="keyword">return</span> e[o].exports;<span class="keyword">var</span> n=e[o]=&#123;exports:&#123;&#125;,id:o,loaded:!<span class="number">1</span>&#125;;<span class="keyword">return</span> r[o].call(n.exports,n,n.exports,t),n.loaded=!<span class="number">0</span>,n.exports&#125;<span class="keyword">var</span> e=&#123;&#125;;<span class="keyword">return</span> t.m=r,t.c=e,t.p=<span class="string">""</span>,t(<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">r,t</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">r</span>)</span>&#123;<span class="built_in">document</span>.write(<span class="string">"Sample "</span>+r)&#125;<span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;<span class="number">30</span>&gt;o;++o)e(o)&#125;]);</div><div class="line"><span class="comment">//# sourceMappingURL=bundle.min.js.map</span></div></pre></td></tr></table></figure>
<p><strong>Gzip</strong><br>开启Gzip，Gzip的思想就是把文件先在服务器端进行压缩，且压缩率达到85%，然后再传输，传输完毕后浏览器会重新对压缩过的内容进行解压缩，并执行。不过对于图片或者PDF最好不要使用gzip，因为他们本身已经压缩过，使用gzip压缩不仅浪费cpu资源，还有可能增加体积。<br>比如，安装Nginx后我们可以开启gzip压缩功能:  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gzip on;</div><div class="line">gzip_http_version 1.0;</div><div class="line">gzip_disable "MSIE [1-6].";</div><div class="line">gzip_types text/plain application/x-javascript text/css text/javascript;</div></pre></td></tr></table></figure>
<p><strong>CDN</strong><br>使用内容分发网络（CDN）来缓存图像、CSS、JS 和 HTML。这些分布式缓存网络可以显著地减少与用户的距离，从而更快地提供资源。同时它们还能够加速你的初始连接。  </p>
<p><strong>Keep-alive</strong><br>Keep-Alive是浏览器端和服务器端约定的一种提高传输效率的协议。使用持久连接是必须有的，否则浏览器进行一次又一次的握手操作以及TCP连接是十分糟糕的。</p>
<p><strong>避免重定向</strong><br>有的网站对于不同的终端设备会显示不同的页面，比如手机上访问微博，会从weibo.com重定向至weibo.cn，每一次重定向都会导致浏览器重新发起请求，延长加载时间。对于这种情况，我们可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries" target="_blank" rel="external">CSS媒体查询</a>来实现响应式设计。  </p>
<p><strong>使用 HTTP/2</strong><br>HTTP/2在网络延迟和性能上完全可以秒杀 HTTP／1，比如：<br>HTTP／2使用 HEAD 压缩 ，将请求和响应数据分割为更小的帧，并对它们采用二进制编码（ Binary Framing ）。在 HTTP/1 中，HTTP 请求和响应都是由「状态行、请求 / 响应头部、消息主体」三部分组成，状态行和头部却没有经过任何压缩，直接以纯文本传输。如下图的比较：    </p>
<p><img src="https://img.aotu.io/wangcainuan/2016-03-16-optimization/http2.png" alt=""></p>
<p>HTTP/2使用请求优先级，服务器可以根据流的优先级，控制资源分配(CPU、内存、带宽)，而在响应数据准备好之后，优先将最高优先级的帧发送给客户端。  </p>
<p>想了解更多关于HTTP/2，可以<a href="https://http2.akamai.com/demo" target="_blank" rel="external">Akamai 的 HTTP/2 demo</a>,在Chrome上看到区别。    </p>
<p><img src="https://pic4.zhimg.com/fd4de832b52876b0fe7b23de560b9733_b.png" alt=""></p>
<h3 id="3"> 3. 性能分析工具 </h3>

<p>选择合适的性能分析工具能大大提高你的优化效率，同时能够量化的显示你的页面性能指标，下面主要介绍Chrome浏览器的Timeline、WebPagetest以及Google PageSpeed这几款性能分析工具。  </p>
<h4 id="3.1"> Chrome Timeline </h4>

<p>Chrome DevTools里的Timeline是最为强大的工具，能够按时间顺序展示页面加载过程及后续过程的网络请求、页面渲染过程、JS运行时长、页面帧率、CPU/GPU使用情况等。<br>首先我们看看Timeline主要有哪些功能:  </p>
<p><img src="https://cloud.githubusercontent.com/assets/11830681/20918044/09fba4d2-bbd0-11e6-8618-440512478290.png" alt=""></p>
<p>可以看到Timeline主要有四个视窗:  </p>
<p><code>Controls 工具栏</code>：提供了录制，清除记录，配置录制过程中需要捕捉哪些数据的功能。<br><code>Overview 概览</code>：页面性能的概览图，通过此图可以大致的分析页面。<br><code>Flame Chart 火焰图</code>：展示了JavaScript的调用堆栈信息。上图中还可以看到三条垂直的虚线，其中蓝线表示COMConentLoaded事件，绿线表示第一次绘制，红线表示load事件，由此也可以看出COMContentLoaded事件比load事件要早不少。<br><code>Details 详情</code>：选中某个事件，会显示该事件的信息，如果没有选中任何事件，就会显示选中时间区段的帧信息。</p>
<p>具体用法可以参考<a href="http://gold.xitu.io/entry/579ee10ca633bd006007c93c" target="_blank" rel="external">这篇文章</a>。  </p>
<h4 id="3.2"> WebPageTest </h4>

<p><a href="">WebPagetest</a>是性能测试的黄金标准，它提供了多方面的量化指标用于性能测试，比如有一个基本的评分，用于评价当前页面优化的水平；有一个截图，显示页面加载后的视觉效果；还有一个浏览器加载资源的瀑布流等等。<br>具体可以参考<a href="https://stephenlyao.github.io/2016/07/27/初识WebpageTest/" target="_blank" rel="external">这篇文章</a>的介绍。<br>同时我们可以通过使用 <a href="https://www.npmjs.com/package/webpagetest" target="_blank" rel="external">API wrapper</a>，来将 WebPagetest 的相关服务添加到 NPM 模块和命令行工具中</p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage1.png" alt=""></p>
<p></p><h4 id="3.3"> Google PageSpeed </h4><br>使用<a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-CN" target="_blank" rel="external">Google PageSpeed</a>会根据网页最佳实践分析和优化测试的网页。  <p></p>
<p><img src="https://lh3.googleusercontent.com/eoWwThODhXOMqaDMdRVXKGS1b0hJ3ThGIajfFp2cGd2oGhIOwR4O5aWYubSX8S73YYafwXEn5NYrwLyaopFvtKU4JqEhqJs=s1600" alt=""></p>
<h3 id="4"> 4. 相关资源推荐 </h3>

<ul>
<li><a href="https://medium.baqend.com/building-a-shop-with-sub-second-page-loads-lessons-learned-4bb1be3ed07#.svcz7qtdn" target="_blank" rel="external">Building a Shop with Sub-Second Page Loads: Lessons Learned</a></li>
<li><a href="https://auth0.com/blog/2016/02/22/12-steps-to-a-faster-web-app/" target="_blank" rel="external">12 Steps to a Faster Web App – Auth0</a></li>
<li><a href="https://developers.google.com/speed/docs/insights/rules" target="_blank" rel="external">PageSpeed Insights - Google Developers</a></li>
<li><a href="https://blogs.msdn.microsoft.com/ie/2014/10/08/http2-the-long-awaited-sequel/" target="_blank" rel="external">HTTP/2: The Long-Awaited Sequel</a></li>
<li><a href="https://www.udacity.com/course/website-performance-optimization--ud884" target="_blank" rel="external">Udacity- Website Performance Optimization</a></li>
<li><a href="http://yslow.org" target="_blank" rel="external">YSlow - a tool that checks for Yahoo’s recommended optimizations</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/" target="_blank" rel="external">PageSpeed Tools - Google Developers</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="external">HTTP 缓存 | Web Fundamentals - Google Developers</a></li>
<li><a href="https://aotu.io/notes/2016/03/16/optimization/" target="_blank" rel="external">前端优化不完全指南</a></li>
<li><a href="https://imququ.com/post/http2-and-wpo-1.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（一）
</a></li>
<li><a href="https://imququ.com/post/http2-and-wpo-2.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（二）</a></li>
<li><a href="https://imququ.com/post/http2-and-wpo-3.html" target="_blank" rel="external">HTTP/2 与 WEB 性能优化（三）</a></li>
<li><a href="https://imququ.com/post/header-compression-in-http2.html" target="_blank" rel="external">HTTP/2 头部压缩技术介绍</a></li>
<li><a href="http://gold.xitu.io/entry/579ee10ca633bd006007c93c" target="_blank" rel="external">Chrome DevTools 之 Timeline，快捷性能优化工具</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;&lt;a hre
    
    </summary>
    
    
      <category term="web性能" scheme="http://yoursite.com/tags/web%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>react-router 源码分析</title>
    <link href="http://yoursite.com/2016/11/28/react-router/"/>
    <id>http://yoursite.com/2016/11/28/react-router/</id>
    <published>2016-11-27T17:29:42.000Z</published>
    <updated>2016-12-08T07:16:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="source-code" scheme="http://yoursite.com/tags/source-code/"/>
    
  </entry>
  
  <entry>
    <title>最小编辑距离问题（Edit Distance）</title>
    <link href="http://yoursite.com/2016/11/23/Min-Edit-Distance/"/>
    <id>http://yoursite.com/2016/11/23/Min-Edit-Distance/</id>
    <published>2016-11-23T07:39:01.000Z</published>
    <updated>2016-12-08T07:16:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究<code>react-diff</code>算法的时候，遇到了两个Virtual DOM列表的Diff，其实就是典型的最小编辑距离(Edit Distance)问题，于是抱着强烈的好奇心去研究了一番并做个总结。  </p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>什么是编辑距离？简单来说就是两个字符串之间，一个转成另一个的最少编辑操作次数，也就是说编辑距离是衡量两个字符串相似性的度量方法，距离越小相似度越大，而其中允许编辑的操作有：插入（insert），删除（delete）以及替换（substitution）。</p>
<p>这里可以看具体问题的描述（摘自<a href="https://leetcode.com/problems/edit-distance/" target="_blank" rel="external">leetcode</a>）：  </p>
<blockquote>
<p>Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)</p>
<p>You have the following 3 operations permitted on a word:</p>
<p>a) Insert a character<br>b) Delete a character<br>c) Replace a character  </p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>具体思路如下图：  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance.png" alt=""></p>
<p>假设字符串<code>X</code>的长度为N,字符串<code>Y</code>的长度为M，<code>D(i,j)</code>表示字符串<code>X[1...i]</code>转换为<code>Y[1...j]</code>的编辑距离：</p>
<blockquote>
<p>注意： 其中<code>X[i]</code>和<code>Y[j]</code>表示字符串<code>X</code>和<code>Y</code>的最后一位    </p>
</blockquote>
<p><strong>初始化:</strong>  </p>
<p>D(i,0) = i，表示Y字符串为空，X[1…i]全部删除，所以编辑距离为i<br>D(0,j) = j，表示X字符串为空，新插入Y[1…j]，所以编辑距离为j    </p>
<p><strong>递归关系:</strong> </p>
<blockquote>
<p>例子中 &gt;&gt; 定义为字符串转换</p>
</blockquote>
<ul>
<li>当<code>X[i]</code>与<code>Y[j]</code>相等时，此时<code>D(i,j) = D(i-1,j-1)</code>，比如 <code>xyz &gt;&gt; thz</code> 与 <code>xy &gt;&gt; th</code> 的编辑距离相等。</li>
<li>当<code>X[i]</code>与<code>Y[j]</code>不相等时，取下面三项的最小值：  <ul>
<li><code>D(i-1,j) + 1</code>，即删除<code>X[i]</code>，编辑距离+1，比如<code>xyz &gt;&gt; thx = xy &gt;&gt; thx + 1</code></li>
<li><code>D(i,j-1) + 1</code>，即插入<code>Y[j]</code>，转换后编辑距离+1，比如 <code>xyz &gt;&gt; thx = xyzx &gt;&gt; thx + 1 = xyz &gt;&gt; th + 1</code></li>
<li><code>D(i-1,j-1) + 2</code>，即<code>X[i]</code>替换成<code>Y[j]</code>，比如<code>xyz &gt;&gt; thx = xyx &gt;&gt; thx + 2 = xy &gt;&gt; th + 2</code> </li>
</ul>
</li>
</ul>
<p>最后求的这三项的最小值就是编辑距离。</p>
<h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><p>我们按照上面的思路用代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> editDistance = (</div><div class="line">  word1,</div><div class="line">  word2,</div><div class="line">  i,</div><div class="line">  j </div><div class="line">) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> len1 = word1.length</div><div class="line">  <span class="keyword">const</span> len2 = word2.length</div><div class="line">  <span class="keyword">const</span> d = []</div><div class="line">  <span class="keyword">if</span>(len1 === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> len2</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len2 === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> len1</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(word1[i<span class="number">-1</span>] === word2[j<span class="number">-1</span>])&#123;</div><div class="line">    <span class="keyword">return</span> editDistance(word1,word2,i<span class="number">-1</span>,j<span class="number">-1</span>)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(editDistance(word1,word2,i<span class="number">-1</span>,j) + <span class="number">1</span>,</div><div class="line">      		    editDistance(word1,word2,i,j<span class="number">-1</span>) + <span class="number">1</span>,</div><div class="line">      		    editDistance(word1,word2,i<span class="number">-1</span>,j<span class="number">-1</span>) + <span class="number">2</span></div><div class="line">      		    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然这样写的代码，性能是一个很大的问题，时间复杂度是随指数增长的，所以解决该问题的办法是使用动态规划求解。  </p>
<h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>我们可以用动态规划的方法来优化时间复杂度<br>以<code>word1</code>为<code>‘sot’</code>，<code>word2</code>为<code>‘stop’</code>为例，我们首先创建一个矩阵：</p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance1.png" alt=""></p>
<p>计算 <code>i=1,j=1</code>:   </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance3.png" alt=""></p>
<p>得到:  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance2.png" alt=""></p>
<p>计算<code>i=1,j=2</code>:  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance5.png" alt=""></p>
<p>得到：  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance4.png" alt=""></p>
<p>最终可以的得到：  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/editdistance6.png" alt=""></p>
<p>于是可以得到最短编辑距离为<code>d[m][n] = 3</code>，现在时间复杂度控制在了O(mn)。</p>
<p>具体算法如下：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> editDistance = (</div><div class="line">  word1,</div><div class="line">  word2</div><div class="line">) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> len1 = word1.length</div><div class="line">  <span class="keyword">const</span> len2 = word2.length</div><div class="line">  <span class="keyword">let</span> d = []</div><div class="line">  <span class="keyword">let</span> i,j</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= len1; i++)&#123;</div><div class="line">    d[i] = []	</div><div class="line">    d[i][<span class="number">0</span>] = i  </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= len2; j++)&#123;</div><div class="line">    d[<span class="number">0</span>][j] = j</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;= len1; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= len2; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])&#123;</div><div class="line">        d[i][j] = d[i<span class="number">-1</span>][j<span class="number">-1</span>]</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        d[i][j] = <span class="built_in">Math</span>.min(d[i<span class="number">-1</span>][j]+<span class="number">1</span>,d[i][j<span class="number">-1</span>]+<span class="number">1</span>,d[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">2</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> d[len1][len2]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体还可以进行空间复杂度的优化，这里我没有做等以后再研究。  </p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://web.stanford.edu/class/cs124/lec/med.pdf" target="_blank" rel="external">stanford - Minimum&amp;Edit&amp;Distance</a>  </li>
<li><a href="http://ccl.pku.edu.cn/doubtfire/Course/Computational%20Linguistics/contents/Minimum%20Edit%20Distance.pdf" target="_blank" rel="external">最小编辑距离算法</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在研究&lt;code&gt;react-diff&lt;/code&gt;算法的时候，遇到了两个Virtual DOM列表的Diff，其实就是典型的最小编辑距
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>实现一个VirtualDOM的轮子</title>
    <link href="http://yoursite.com/2016/11/14/Virtual-Dom/"/>
    <id>http://yoursite.com/2016/11/14/Virtual-Dom/</id>
    <published>2016-11-13T17:24:11.000Z</published>
    <updated>2016-12-08T07:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习React有一段时间了，一直想深入了解一下React的核心技术之一VirtualDOM的实现原理，于是便研究了一下其中的算法实现，实现了一个简易版本的VirtualDOM来帮助自己理解。  </p>
<h2 id="什么是VirtualDOM"><a href="#什么是VirtualDOM" class="headerlink" title="什么是VirtualDOM"></a>什么是VirtualDOM</h2><h3 id="状态管理与UI同步的今世前生"><a href="#状态管理与UI同步的今世前生" class="headerlink" title="状态管理与UI同步的今世前生"></a>状态管理与UI同步的今世前生</h3><p>在Web早期，页面通常是静态的，也就是说页面上的状态一旦发生改变，需要重新请求页面，得到基于新数据的新页面。随着web应用越来越复杂，开发者发现很多情况下都只是部分状态发生改变，所以并不需要重新渲染整个页面，只要更改新状态对应的UI就好了。<br>不过如何实现呢？最简单的办法就是操作DOM了，不过由于DOM的复杂性，开发者不得不编写大量代码，为了简化这个过程，许多框架就像雨后春笋般出现了。</p>
<h3 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h3><p>这类框架开发者只需要将UI绑定到状态(model)上，监听数据的变更，一旦变更就更新对应的UI节点：<br><img src="http://upload-images.jianshu.io/upload_images/37341-085d63a591c8647d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>以<code>Angular</code>为例的MVVM框架采用脏检查的方式来找到需要重新渲染的UI节点，虽然这种方式依然使用数据变化后更新对应 DOM 节点的方式，不过建立这种绑定关系交给了框架去处理。  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/37341-45f13340118dcea9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="VirtualDOM"><a href="#VirtualDOM" class="headerlink" title="VirtualDOM"></a>VirtualDOM</h3><p>React的VirtualDOM的思路更为直接，初次渲染时，将数据渲染为VirtualDOM，然后通过这个VirtualDOM（javascript<br>对象）去生成真实的DOM，当状态变化时，得到一个新的VirtualDOM，将新的与旧的进行diff得到差异，然后在patch过程中将差异反映到真实DOM上，从而将操作DOM控制在最小。  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/37341-f3172ab2917534d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">  </p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>VirtualDOM算法主要有三个步骤:  </p>
<ul>
<li>用 js 对象模拟DOM Tree</li>
<li>diff两个虚拟的DOM Tree</li>
<li>把差异反映到真实的DOM Tree</li>
</ul>
<h3 id="一、用-js-对象模拟DOM-Tree"><a href="#一、用-js-对象模拟DOM-Tree" class="headerlink" title="一、用 js 对象模拟DOM Tree"></a>一、用 js 对象模拟DOM Tree</h3><h3 id="二、diff两个虚拟的DOM-Tree"><a href="#二、diff两个虚拟的DOM-Tree" class="headerlink" title="二、diff两个虚拟的DOM Tree"></a>二、diff两个虚拟的DOM Tree</h3><h3 id="三、把差异反映到真实的DOM-Tree"><a href="#三、把差异反映到真实的DOM-Tree" class="headerlink" title="三、把差异反映到真实的DOM Tree"></a>三、把差异反映到真实的DOM Tree</h3><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://teropa.info/blog/2015/03/02/change-and-its-detection-in-javascript-frameworks.html" target="_blank" rel="external">Change And Its Detection In JavaScript Frameworks</a></li>
<li><a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="external">深入浅出React（四）：虚拟DOM Diff算法解析</a>  </li>
<li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="external">深度剖析：如何实现一个 Virtual DOM 算法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20346379?refer=purerender" target="_blank" rel="external">React 源码剖析系列 － 不可思议的 react diff</a></li>
<li><a href="https://segmentfault.com/a/1190000003741294" target="_blank" rel="external">Edit Distance 最小编辑距离</a></li>
<li><a href="http://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf" target="_blank" rel="external">A Survey on Tree Edit Distance and Related<br>Problems</a></li>
<li><a href="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060#.1ripyt7yi" target="_blank" rel="external">How to write your own Virtual DOM(1)</a></li>
<li><a href="https://medium.com/@deathmood/write-your-virtual-dom-2-props-events-a957608f5c76#.fjuyeqczn" target="_blank" rel="external">How to write your own Virtual DOM(2)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习React有一段时间了，一直想深入了解一下React的核心技术之一VirtualDOM的实现原理，于是便研究了一下其中的算法实现，实现了
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>小玩怡情－Phaser</title>
    <link href="http://yoursite.com/2016/11/04/flappyBird-with-phaser/"/>
    <id>http://yoursite.com/2016/11/04/flappyBird-with-phaser/</id>
    <published>2016-11-04T12:56:27.000Z</published>
    <updated>2016-12-10T09:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://phaser.io" target="_blank" rel="external">Phaser</a>是一个免费开源而且功能强大的html5游戏框架，利用它可以很轻松的开发出一个html5游戏。本篇文章主要讲利用Phaser来开发一个简单的flappy bird。这里有试玩地址<a href="https://stephenlyao.github.io/HTML5-Games/FlappyBird/" target="_blank" rel="external">Play</a>，相关代码放在了<a href="https://github.com/stephenLYao/HTML5-Games" target="_blank" rel="external">github</a>上。  </p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始前，为了让我们更专注于写游戏代码上，可以先下载一份<a href="http://7xl0rs.com1.z0.glb.clouddn.com/FlappyBird.zip" target="_blank" rel="external">模版</a>，下载后里面的目录结构为： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-- FlappyBird</div><div class="line">   -- assets</div><div class="line">      -- bird.png</div><div class="line">      -- pipe.png</div><div class="line">      -- hurt.wav</div><div class="line">      -- score.wav</div><div class="line">      -- jump.wav</div><div class="line">   -- main.js</div><div class="line">   -- phaser.min.js</div><div class="line">   -- index.html</div></pre></td></tr></table></figure>
<p>其中<code>assets</code>主要放置我们的精灵图以及声音素材，<code>main.js</code>主要是写游戏逻辑的地方。前期工作准备好了后，接下来我们就开始吧！  </p>
<h2 id="新建游戏"><a href="#新建游戏" class="headerlink" title="新建游戏"></a>新建游戏</h2><p>首先在<code>main.js</code>中新建一个空的Phaser游戏：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个mainState来包裹整个游戏状态</span></div><div class="line"><span class="keyword">var</span> mainState = &#123;</div><div class="line">    preload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  		<span class="comment">// preload函数会在游戏开始前执行</span></div><div class="line">  		<span class="comment">// 所以这里主要放置图片声音等资源来进行预加载</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        <span class="comment">// create函数在preload函数后加载     </span></div><div class="line">        <span class="comment">// 所以这里主要设置游戏，显示精灵图等 </span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// update函数每秒会调用60次    </span></div><div class="line">        <span class="comment">// 所以这里主要放置游戏逻辑   </span></div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 初始化Phaser，创建宽400px，高490px的游戏</span></div><div class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> Phaser.Game(<span class="number">400</span>, <span class="number">490</span>);</div><div class="line"></div><div class="line"><span class="comment">// 加入mainState, 命名为'main'</span></div><div class="line">game.state.add(<span class="string">'main'</span>, mainState); </div><div class="line"></div><div class="line"><span class="comment">// 执行游戏开始</span></div><div class="line">game.state.start(<span class="string">'main'</span>);</div></pre></td></tr></table></figure>
<p>接下来我们就开始写<code>preload()</code>、<code>create()</code>以及<code>update()</code>函数。</p>
<h2 id="创建Bird"><a href="#创建Bird" class="headerlink" title="创建Bird"></a>创建Bird</h2><p>下面我们来创建游戏中的bird：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">preload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    </div><div class="line">    <span class="comment">// 加载bird精灵图</span></div><div class="line">    game.load.image(<span class="string">'bird'</span>, <span class="string">'assets/bird.png'</span>); </div><div class="line">&#125;,</div><div class="line"></div><div class="line">create: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="comment">// 游戏背景颜色</span></div><div class="line">    game.stage.backgroundColor = <span class="string">'#71c5cf'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 设置游戏物理系统</span></div><div class="line">    game.physics.startSystem(Phaser.Physics.ARCADE);</div><div class="line"></div><div class="line">    <span class="comment">// 设置bird出现的位置，这里我设置的坐标为(100,245)</span></div><div class="line">    <span class="keyword">this</span>.bird = game.add.sprite(<span class="number">100</span>, <span class="number">245</span>, <span class="string">'bird'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 给bird加上物理系统，让它具有移动、重力、碰撞等等</span></div><div class="line">    game.physics.arcade.enable(<span class="keyword">this</span>.bird);</div><div class="line"></div><div class="line">    <span class="comment">// 添加重力，让bird能够向下掉</span></div><div class="line">    <span class="keyword">this</span>.bird.body.gravity.y = <span class="number">1000</span>;  </div><div class="line"></div><div class="line">    <span class="comment">// 当按下空格后，调用jump()函数（后面会提到这个函数）</span></div><div class="line">    <span class="keyword">var</span> spaceKey = game.input.keyboard.addKey(</div><div class="line">                    Phaser.Keyboard.SPACEBAR);</div><div class="line">    spaceKey.onDown.add(<span class="keyword">this</span>.jump, <span class="keyword">this</span>);     </div><div class="line">&#125;,</div><div class="line"></div><div class="line">update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 判断bird如果超出屏幕边界，则调用restartGame()函数</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.bird.y &lt; <span class="number">0</span> || <span class="keyword">this</span>.bird.y &gt; <span class="number">490</span>)</div><div class="line">        <span class="keyword">this</span>.restartGame();</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>下面我们添加两个函数，一个是<code>jump()</code>一个<code>restartGame()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 减少bird竖直方向的速度</span></div><div class="line">	<span class="keyword">this</span>.bird.body.velocity.y = <span class="number">-350</span></div><div class="line">&#125;,</div><div class="line"></div><div class="line">restartGame: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 重启游戏</span></div><div class="line">	game.state.start(<span class="string">'main'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><blockquote>
<p>注意如果你直接在浏览器打开index.html文件，会报<code>Uncaught SecurityError: Failed to execute &#39;texImage2D&#39; on &#39;WebGLRenderingContext&#39;</code>的错误，这是因为javascript不允许在本地文件系统下加载文件，为了解决这个问题可以使用一个webserver，比如</p>
<ul>
<li>使用<code>python -m SimpleHTTPServer</code> 然后访问<code>localhost:8000</code>;</li>
<li>下载<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="external">http-server</a>，使用<code>http-server</code>访问<code>localhost:8080</code>  </li>
</ul>
</blockquote>
<p>最终你可以看到这个：  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB1/3.gif" alt=""></p>
<h2 id="创建Pipes"><a href="#创建Pipes" class="headerlink" title="创建Pipes"></a>创建Pipes</h2><p>现在我们来添加管道障碍物。首先，我们先在<code>preload()函数</code>里加载pipe资源:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">game.load.image(<span class="string">'pipe'</span>,<span class="string">'assets/pipe.png'</span>)</div></pre></td></tr></table></figure>
<p>因为游戏里会有许多的pipes，所以我们可以使用Phaser里的<code>group()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.pipes = game.add.group()</div></pre></td></tr></table></figure>
<p>接下来设置单独的一个pipe：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传进pipe的坐标作为参数</span></div><div class="line">addOnePipe: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">	<span class="comment">//创建一个pipe(x,y)	</span></div><div class="line">	<span class="keyword">var</span> pipe = game.add.sprite(<span class="string">'pipe'</span>,x,y)</div><div class="line">	</div><div class="line">	<span class="comment">//将pipe加入到group中去</span></div><div class="line">	<span class="keyword">this</span>.pipes.add(pipe)</div><div class="line">	</div><div class="line">	<span class="comment">//加入物理效果</span></div><div class="line">	game.physics.arcade.enable(pipe)</div><div class="line">	</div><div class="line">	<span class="comment">//给pipe添加向左移动的速度（向左为负，向右为正，这里我们主要是让pipe向左移动）</span></div><div class="line">	pipe.body.velocity.x = <span class="number">-200</span></div><div class="line">	</div><div class="line">	<span class="comment">// 当pipe不在视野的时候，自动的销毁	</span></div><div class="line">	pipe.checkWorldBounds = <span class="literal">true</span></div><div class="line">	pipe.outOfBoundsKill = <span class="literal">true</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来创建一排的pipes，主要有6个pipe，2个hole，其中hole的位置是随机且两个hole是相邻的: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">addRowOfPipes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//随机产生hole</span></div><div class="line">	<span class="keyword">var</span> hole = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>) + <span class="number">1</span></div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(i != hole &amp;&amp; i != hole + <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">this</span>.addOnePipe(<span class="number">400</span>,i * <span class="number">60</span> + <span class="number">10</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面图就非常清楚了：<br><img src="http://www.lessmilk.com/imgtut/FB1/6.png" alt=""></p>
<p>最后我们在<code>create()</code>函数里，通过每1.5秒循环调用<code>addRowOfPipes()</code>函数来创建一个<code>timer</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.timer = game.time.events.loop(<span class="number">1500</span>,<span class="keyword">this</span>.addRowOfPipes,<span class="keyword">this</span>)</div></pre></td></tr></table></figure>
<p>完成这一步后，效果应该是这样：  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB1/4.gif" alt=""></p>
<h2 id="创建分数和碰撞"><a href="#创建分数和碰撞" class="headerlink" title="创建分数和碰撞"></a>创建分数和碰撞</h2><p>我们需要一个记分板来显示分数，于是在<code>create()</code>函数中添加:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.score = <span class="number">0</span></div><div class="line"><span class="keyword">this</span>.scoreLabel = game.add.text(<span class="number">20</span>,<span class="number">20</span>,<span class="string">'0'</span>,&#123;fill: <span class="string">'#fff'</span>&#125;)</div></pre></td></tr></table></figure>
<p>然后分数增加的形式我们设置为，每次创建一排的pipes就加一分，也就是在<code>addRowOfPipes</code>中加上：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.score += <span class="number">1</span></div><div class="line"><span class="keyword">this</span>.scoreLabel.text = <span class="keyword">this</span>.score</div></pre></td></tr></table></figure>
<p>下面我们加入碰撞，每次碰撞后调用<code>restartGame()</code>函数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">game.physics.arcade.overlap(<span class="keyword">this</span>.bird, <span class="keyword">this</span>.pipes, <span class="keyword">this</span>.restartGame, <span class="literal">null</span>, <span class="keyword">this</span>)</div></pre></td></tr></table></figure>
<p>效果如下：  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB1/5.gif" alt=""></p>
<h2 id="添加jump动画"><a href="#添加jump动画" class="headerlink" title="添加jump动画"></a>添加jump动画</h2><p>我们知道在flappybird中，bird会随下落而缓慢向下，随着jump而有向上的趋势，类似于这种效果:  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB2/5.gif" alt=""></p>
<p>首先我们先实现随着下落而缓慢向下，在<code>update()</code>函数中添加:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.bird.angle &lt; <span class="number">20</span>)&#123;</div><div class="line">	<span class="keyword">this</span>.bird.angle += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原理也很简单，就是当bird的角度小于20的时候不断加一个度数（注意是顺时针方向）。<br>然后实现第二个效果，我们只要简单的设置<code>this.bird.angle = -20</code>就可以，不过为了让动画看起来更自然，我们可以让变化限制在非常短的时间内（比如100毫秒）: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新建一个animation</span></div><div class="line"><span class="keyword">var</span> animation = game.add.tween(<span class="keyword">this</span>.bird)</div><div class="line"></div><div class="line"><span class="comment">// 改变角度并限制在100毫秒内</span></div><div class="line">animation.to(&#123;angle: <span class="number">-20</span>&#125;, <span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="comment">// 执行动画</span></div><div class="line">animation.start()</div></pre></td></tr></table></figure>
<p>这里需要注意的一点是，此时bird旋转的效果并不是我们想要的效果，因为此时旋转的中心(我们称为’anchor’)在左上角，如下图左边的bird：  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB2/2.png" alt=""></p>
<p>我们希望将anchor(上图红色的点)放置在右边bird的位置，于是我们在<code>create()</code>函数中设置: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.bird.anchor.setTo(<span class="number">-0.2</span>,<span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<p>效果如下:  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB2/3.gif" alt="">  </p>
<h2 id="添加死亡动画"><a href="#添加死亡动画" class="headerlink" title="添加死亡动画"></a>添加死亡动画</h2><p>之前当bird碰撞pipes后是直接重启游戏的，现在我们希望添加bird死亡掉落的动画,我们将之前<code>update()</code>函数里的<code>restartGame()</code>修改为<code>hitPipe()</code>函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">game.physics.arcade.overlap(<span class="keyword">this</span>.bird,<span class="keyword">this</span>.pipes,<span class="keyword">this</span>.hitPipe,<span class="literal">null</span>,<span class="keyword">this</span>)</div></pre></td></tr></table></figure>
<p>hitPipe()函数如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">hitPipe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 如果bird已经碰撞了pipe，则不做任何事，此时表明bird已经掉落</span></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.bird.alive == <span class="literal">false</span>)&#123;</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.bird.alive == <span class="literal">false</span></div><div class="line">	</div><div class="line">	<span class="comment">// 将timer移除，防止出现新的pipes</span></div><div class="line">	game.time.events.remove(<span class="keyword">this</span>.timer)</div><div class="line">	</div><div class="line">	<span class="comment">// 让所有的pipes停止运动</span></div><div class="line">	<span class="keyword">this</span>.pipes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">p</span>)</span>&#123;</div><div class="line">        p.body.velocity.x = <span class="number">0</span>;</div><div class="line">    &#125;, <span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着为了不让bird在碰撞pipe后继续jump，我们添加以下代码:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.bird.alive == <span class="literal">false</span>)&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：  </p>
<p><img src="http://www.lessmilk.com/imgtut/FB2/4.gif" alt=""></p>
<h2 id="添加声音"><a href="#添加声音" class="headerlink" title="添加声音"></a>添加声音</h2><p>首先我们先在<code>preload()</code>函数加载声音资源:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">game.load.audio(<span class="string">'jump'</span>,<span class="string">'assets/jump.wav'</span>)</div><div class="line">game.load.audio(<span class="string">'dead'</span>,<span class="string">'assets/hurt.wav'</span>)</div><div class="line">game.load.audio(<span class="string">'score'</span>,<span class="string">'assets/score.wav'</span>)</div></pre></td></tr></table></figure>
<p>分别是jump的声音、死亡的声音以及得分的声音。  </p>
<p>然后我们在<code>create()</code>中设置这三种： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jumpSong = game.add.audio(<span class="string">'jump'</span>)</div><div class="line"><span class="keyword">this</span>.deadSong = game.add.audio(<span class="string">'dead'</span>)</div><div class="line"><span class="keyword">this</span>.scoreSong = game.add.audio(<span class="string">'score'</span>)</div></pre></td></tr></table></figure>
<p>我们在<code>jump()</code>函数中添加：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jumpSong.play()</div></pre></td></tr></table></figure>
<p>在<code>hitPipe()</code>函数中添加：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.deadSong.play()</div></pre></td></tr></table></figure>
<p>在<code>addRowOfPipes()</code>函数中添加：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.scoreSong.play()</div></pre></td></tr></table></figure>
<p>接下来就可以开始愉快的玩耍了:)</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://phaser.io" target="_blank" rel="external">Phaser.io</a><br><a href="http://www.lessmilk.com/tutorial/flappy-bird-phaser-1" target="_blank" rel="external">flappy-bird-phaser</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://phaser.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Phaser&lt;/a&gt;是一
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>探索javascript异步编程</title>
    <link href="http://yoursite.com/2016/10/21/javascript-asynchronous-programming/"/>
    <id>http://yoursite.com/2016/10/21/javascript-asynchronous-programming/</id>
    <published>2016-10-21T08:59:11.000Z</published>
    <updated>2016-12-08T07:17:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>［译］什么时候“不要”用箭头函数</title>
    <link href="http://yoursite.com/2016/10/20/When-not-to-use-arrow-functions/"/>
    <id>http://yoursite.com/2016/10/20/When-not-to-use-arrow-functions/</id>
    <published>2016-10-20T02:15:28.000Z</published>
    <updated>2016-12-08T07:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接： <a href="https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/" target="_blank" rel="external">https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/</a></p>
</blockquote>
<p>看到你写的编程语言每天都在进化更新，是一件非常值得高兴的事情，通过从错误中学习、发现更好的解决办法以及创造出新的特性，来让这个过程不断的版本迭代。</p>
<p>近几年这些都发生在Javascrpit身上，尤其是<a href="http://www.ecma-international.org/ecma-262/6.0/" target="_blank" rel="external">ECMAScript6</a>的出现给这门语言带来了更高的实用性： 箭头函数、类以及<a href="https://github.com/lukehoban/es6features#introduction" target="_blank" rel="external">更多</a>，这是非常棒的！ </p>
<p>其中最有价值的特性之一便是箭头函数。同时有大量的文章来描述它的上下文透明性以及短语法。如果你是新接触ES6的话，可以从<a href="https://strongloop.com/strongblog/an-introduction-to-javascript-es6-arrow-functions/" target="_blank" rel="external">这篇文章</a>来了解箭头函数。   </p>
<p>但是水能载舟，也能覆舟。许多时候新特性会介绍的非常混乱，其中之一就是箭头函数被误用。 </p>
<p>这篇文章通过情景引导你哪里需要绕过箭头函数，使用更合适的旧的<a href="https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function" target="_blank" rel="external">函数表达式</a>或新的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions" target="_blank" rel="external">短语法</a>。同时对短语法有个心理准备，因为它会影响你代码的可读性。  </p>
<h2 id="1-在对象上定义方法"><a href="#1-在对象上定义方法" class="headerlink" title="1.在对象上定义方法"></a>1.在对象上定义方法</h2><p>在javascript中，方法是储存在对象一个属性里的一个函数。当调用该方法的时候，<code>this</code>指向的是方法所属的对象。  </p>
<h3 id="1a-对象字面量"><a href="#1a-对象字面量" class="headerlink" title="1a.对象字面量"></a>1a.对象字面量</h3><p>自从箭头函数有了短语法，使用它来定义方法变得更加吸引人，让我们尝试一下： </p>
<p><a href="http://jsbin.com/nisalub/1/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> calculate = &#123;  </div><div class="line">  array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  sum: () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce((result, item) =&gt; result + item);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true  </span></div><div class="line"><span class="comment">// Throws "TypeError: Cannot read property 'reduce' of undefined"</span></div><div class="line">calculate.sum();</div></pre></td></tr></table></figure>
<p><code>calculate.sum</code>方法是使用箭头函数定义的，但是在调用<code>calculate.sum</code>的时候却抛出<code>TypeError</code>的错误，这是因为<code>this.array</code>的值是<code>undefined</code>.<br>当调用<code>calculate</code>对象上的<code>sum()</code>方法的时候，上下文依然是<code>window</code>,原因是箭头函数绑定了<code>window</code>对象的词法上下文。<br>执行<code>this.array</code>相当于执行<code>window.array</code>,它的值是<code>undefined</code>.  </p>
<p>解决办法是使用函数表达式或者短语法（ECMAScript 6中可用）来定义方法。在这种情况下<code>this</code>指向的是调用对象，而不是邻近上下文。让我们来看看修改的版本:  </p>
<p><a href="http://jsbin.com/nemorup/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> calculate = &#123;  </div><div class="line">  array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  sum() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === calculate); <span class="comment">// =&gt; true</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce((result, item) =&gt; result + item);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">calculate.sum(); <span class="comment">// =&gt; 6</span></div></pre></td></tr></table></figure>
<p>因为<code>sum</code>是一个普通函数，调用<code>calculate.sum()</code>其中的<code>this</code>指向的是<code>calculate</code>对象，<code>this.array</code>便是array的一个引用，所以元素之和计算正确： 6 。   </p>
<h3 id="1b-对象原型"><a href="#1b-对象原型" class="headerlink" title="1b.对象原型"></a>1b.对象原型</h3><p>相同的规则也适用于通过原型对象来定义方法。如下面例子，如果使用箭头函数来定义<code>sayCatName</code>方法，会指向一个不正确的上下文<code>window</code>：  </p>
<p><a href="http://jsbin.com/yumira/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCat</span>(<span class="params">name</span>) </span>&#123;  </div><div class="line">  <span class="keyword">this</span>.catName = name;</div><div class="line">&#125;</div><div class="line">MyCat.prototype.sayCatName = () =&gt; &#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.catName;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> MyCat(<span class="string">'Mew'</span>);  </div><div class="line">cat.sayCatName(); <span class="comment">// =&gt; undefined</span></div></pre></td></tr></table></figure>
<p>使用<em>保守派</em>的函数表达式:<br><a href="http://jsbin.com/betara/3/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a> </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCat</span>(<span class="params">name</span>) </span>&#123;  </div><div class="line">  <span class="keyword">this</span>.catName = name;</div><div class="line">&#125;</div><div class="line">MyCat.prototype.sayCatName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === cat); <span class="comment">// =&gt; true</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.catName;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> MyCat(<span class="string">'Mew'</span>);  </div><div class="line">cat.sayCatName(); <span class="comment">// =&gt; 'Mew'</span></div></pre></td></tr></table></figure>
<p>当你调用<code>cat.sayCatName()</code>方法的时候，<code>sayCatName</code>这个普通函数将上下文改变成了<code>cat</code>对象。  </p>
<h2 id="2-结合动态上下文的回调函数"><a href="#2-结合动态上下文的回调函数" class="headerlink" title="2.结合动态上下文的回调函数"></a>2.结合动态上下文的回调函数</h2><p><code>this</code>是javascript中一个非常强大的特性。它允许通过函数调用的方式来改变上下文。通常来说，使上下文为函数调用时候的目标对象，会让代码更加自然化，也就是说“让事情发生在对象上”。  </p>
<p>然而，箭头函数在声明的时候是静态的绑定上下文，不可能是动态的。这种情况下<code>this</code>是不必要的。  </p>
<p>在客户端编程中，给DOM元素绑定监听事件是一个十分常见的事情，一个事件以<code>this</code>作为目标元素去触发事件处理函数，是动态上下文最简便的用法。  </p>
<p>下面的例子是使用箭头函数来作为事件处理函数：   </p>
<p><a href="http://jsbin.com/sesoda/2/edit?html,js,console,output" target="_blank" rel="external">使用JS Bin尝试</a>   </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);  </div><div class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></div><div class="line">  <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子中，箭头函数中的<code>this</code>指向的是<code>window</code>，也就是被定义在了全局的上下文。当一个点击事件发生时，浏览器尝试去调用<code>button</code>上下文中的事件处理函数，但是此时箭头函数并没有改变它之前定义的上下文（译者注：也就是window）。<br>所以，<code>this.innerHTML</code>的值和<code>window.innerHTML</code>的相等，这是没意义的。  </p>
<p>你不得不使用函数表达式，来允许你改变<code>this</code>所指向的上下文。  </p>
<p><a href="http://jsbin.com/hafibi/4/edit?html,js,console,output" target="_blank" rel="external">使用JS Bin尝试</a>   </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>);  </div><div class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === button); <span class="comment">// =&gt; true</span></div><div class="line">  <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当用户点击按钮，事件处理函数中的<code>this</code>指向的是<code>button</code>。所以<code>this.innnerHTML = &#39;Click Button&#39;</code>正确的的修改了按钮的文本，并且反映了点击的状态。  </p>
<h2 id="3-调用构造器"><a href="#3-调用构造器" class="headerlink" title="3. 调用构造器"></a>3. 调用构造器</h2><p><code>this</code>在构造调用中会指向一个新创建的对象。当执行<code>new MyFunction()</code>的时候，构造函数<code>MyFunction</code>的上下文是一个新的对象： <code>this instanceof MyFunction === true</code>.<br>注意到箭头函数不能用在构造器上，Javascript会通过抛出异常来隐式的预防这个。<br>无论如何，<code>this</code>会指向邻近的上下文而不是新创建的对象。换句话说，一个箭头函数的构造器并没有什么意义，相反可能会造成歧义。<br>让我们来看看如果使用箭头函数构造器:  </p>
<p><a href="http://jsbin.com/dazadiw/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>     </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Message = (text) =&gt; &#123;  </div><div class="line">  <span class="keyword">this</span>.text = text;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Throws "TypeError: Message is not a constructor"</span></div><div class="line"><span class="keyword">var</span> helloMessage = <span class="keyword">new</span> Message(<span class="string">'Hello World!'</span>);</div></pre></td></tr></table></figure>
<p><code>Message</code>是一个箭头函数，如果执行<code>new Message(&#39;Hello World!&#39;)</code> ，Javascript会抛出一个<code>TypeError</code>，也就是说<code>Message</code>不能当做构造器。<br>我认为相对于之前javascript版本的<em>静默失败</em>，ECMAScript 6 在这种情况下提供提供包含错误信息的失败提示会是更佳高效的实践。  </p>
<p>上面的例子可以通过一个<a href="https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function" target="_blank" rel="external">函数表达式</a>来修正，这是一种正确的方式（包括<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="external">函数声明</a>）来创建构造器：    </p>
<p><a href="http://jsbin.com/qogemo/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>   </p>
<pre><code class="javascript"><span class="keyword">var</span> Message = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>{  
  <span class="keyword">this</span>.text = text;
};
<span class="keyword">var</span> helloMessage = <span class="keyword">new</span> Message(<span class="string">'Hello World!'</span>);  
<span class="built_in">console</span>.log(helloMessage.text); <span class="comment">// =&gt; 'Hello World!'</span>
</code></pre>
<h2 id="4-最短语法"><a href="#4-最短语法" class="headerlink" title="4.最短语法"></a>4.最短语法</h2><p>箭头函数有个非常棒的属性，即可以省略参数的括号，如果函数体只有一条语句，可以省略代码块的花括号<code>{}</code>以及<code>return</code>。这可以帮助你写更短的函数。  </p>
<p>曾经我的大学编程老师给学生布置了一个非常有趣的任务：使用C语言通过一个最短的函数来计算字符串的长度。这是学习和探索新语言一个非常好的途径。  </p>
<p>尽管如此在现实世界中你的应用代码会被许多开发者阅读。最短语法不是一直都适合给你的同事快速理解函数的意思。  </p>
<p>某种程度上来说，压缩函数会让阅读变得更为困难，所以别在这里投入太大的热情。让我们来看看这个例子：  </p>
<p><a href="http://jsbin.com/xumavu/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>   </p>
<pre><code class="javascript"><span class="keyword">let</span> multiply = (a, b) =&gt; b === <span class="literal">undefined</span> ? b =&gt; a * b : a * b;  
<span class="keyword">let</span> double = multiply(<span class="number">2</span>);  
double(<span class="number">3</span>);      <span class="comment">// =&gt; 6  </span>
multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; 6</span>
</code></pre>
<p><code>multiply</code>返回了两个数字相乘的结果或者说为了接下来的运算，关联了第一个参数的闭包。<br>函数运行良好并且看起来非常短，但是它可能在第一眼看的时候比较难的理解。   </p>
<p>为了让它的可读性更高，可以给箭头函数添加可选的花括号和<code>return</code>语句或者用一些普通函数：  </p>
<p><a href="http://jsbin.com/huhikem/2/edit?js,console" target="_blank" rel="external">使用JS Bin尝试</a>    </p>
<pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>{  
  <span class="keyword">if</span> (b === <span class="literal">undefined</span>) {
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>{
      <span class="keyword">return</span> a * b;
    }
  }
  <span class="keyword">return</span> a * b;
}
<span class="keyword">let</span> double = multiply(<span class="number">2</span>);  
double(<span class="number">3</span>);      <span class="comment">// =&gt; 6  </span>
multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; 6</span>
</code></pre>
<p>最好的方式就是在短和长之间寻找一个平衡点来让你Javascript代码更为简单。   </p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5.结论"></a>5.结论</h2><p>毫无疑问，箭头函数是一个非常棒的增强特性。如果使用正确的话，它能在很多地方带来便利，比如早期你不得不使用 .bind() 或者试图去捕获上下文。同时它也让代码变得更加轻便。</p>
<p>在一些情况下，优势和劣势是并存的。当要求动态上下文的时候，你就不能使用箭头函数，比如定义方法，用构造器创建对象，当要处理事件时用 this 获取目标。</p>
<p><strong>一些参考文章</strong><br><a href="http://rainsoft.io/gentle-explanation-of-this-in-javascript/" target="_blank" rel="external">Gentle explanation of ‘this’ keyword in JavaScript </a><br><a href="http://rainsoft.io/javascript-hoisting-in-details/" target="_blank" rel="external">JavaScript variables hoisting in details </a><br><a href="http://rainsoft.io/the-legend-of-javascript-equality-operator/" target="_blank" rel="external">The legend of JavaScript equality operator</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接： &lt;a href=&quot;https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ra
    
    </summary>
    
    
      <category term="translations" scheme="http://yoursite.com/tags/translations/"/>
    
  </entry>
  
  <entry>
    <title>jquery以及underscore中的无new构造</title>
    <link href="http://yoursite.com/2016/10/05/jquery-no-new/"/>
    <id>http://yoursite.com/2016/10/05/jquery-no-new/</id>
    <published>2016-10-05T06:25:09.000Z</published>
    <updated>2016-12-08T07:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们来看看jquery中的无new构造，我们知道，jquery中可以通过以下两种方式来构造对象：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 无new</span></div><div class="line">$(<span class="string">'#id'</span>).context(<span class="string">'hello world'</span>) </div><div class="line"></div><div class="line"><span class="comment">// 有new</span></div><div class="line"><span class="keyword">var</span> id = <span class="keyword">new</span> $(<span class="string">'#id'</span>)</div><div class="line">id.context(<span class="string">'hello world'</span>)</div></pre></td></tr></table></figure>
<p>显然，我们用得最多就是第一种无new的构造方式，那这种方式内部又是怎么实现的呢？下面我们一步步来实现这样的效果。<br>js中函数是一等公民，我们在用oop形式编程的时候，很容易的会使用类来实例化对象： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">var</span> cQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, contex</span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">cQuery.prototype = &#123;</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name = name</div><div class="line">	&#125;,</div><div class="line">	name: <span class="string">'stephen'</span>,</div><div class="line">	age: <span class="number">20</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> cQuery()</div><div class="line"></div><div class="line">c.age  <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>如果我们想通过无new来构造对象的话，我们第一反应可能是这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, contex</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> cQuery()</div><div class="line">&#125;</div><div class="line"></div><div class="line">cQuery.prototype = &#123;</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name = name</div><div class="line">	&#125;,</div><div class="line">	name: <span class="string">'stephen'</span>,</div><div class="line">	age: <span class="number">20</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们会发现这样就陷入了一个无穷的循环之中，显然是不行的。我们其实可以把cQuery类当作一个工厂方法来创建实例，把这个方法放cQuery.prototye原型对象中:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, contex</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> cQuery.prototype.init()</div><div class="line">&#125;</div><div class="line"></div><div class="line">cQuery.prototype = &#123;</div><div class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">	&#125;,</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name = name</div><div class="line">	&#125;,</div><div class="line">	name: <span class="string">'stephen'</span>,</div><div class="line">	age: <span class="number">20</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来似乎解决了我们的问题，但是如果我们想在init使用this呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, contex</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> cQuery.prototype.init()</div><div class="line">&#125;</div><div class="line"></div><div class="line">cQuery.prototype = &#123;</div><div class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.age = <span class="number">18</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">	&#125;,</div><div class="line">	setName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name = name</div><div class="line">	&#125;,</div><div class="line">	name: <span class="string">'stephen'</span>,</div><div class="line">	age: <span class="number">20</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">cQuery().age  <span class="comment">//18</span></div><div class="line">cQuery().name  <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<p>显然，这时候由于是实例init()函数，所以this和原来cQuery的this作用域分离了，age会指向init中的age，而name由于init中未定义，所以为undefine。 这显然不是我们要的效果，那我们该解决呢？ 其实很简单： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cQuery.prototype.init.prototype = cQuery.prototype</div></pre></td></tr></table></figure>
<p>这便是最精妙的地方，将cQuery的prototype的属性赋给init的prototype，这样就保证了this虽然指向init，但仍然继承aQuery上的属性。<br>上面内容其实就是jquery中实现无new构造的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">　　jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">        <span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context, rootjQuery);</div><div class="line">    &#125;,</div><div class="line">    jQuery.fn = jQuery.prototype = &#123;</div><div class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context, rootjQuery</span>) </span>&#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    jQuery.fn.init.prototype = jQuery.fn;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>最后在谈谈underscore中的无new构造，放上源码注释： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) <span class="keyword">return</span> obj;  </div><div class="line">        <span class="comment">// 如果Obj已经是underscore对象，则原样返回</span></div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> _)) <span class="keyword">return</span> <span class="keyword">new</span> _(obj); </div><div class="line">        <span class="comment">// 采用这种写法即使没用new操作符也可以构造新undersocre对象</span></div><div class="line">        <span class="keyword">this</span>._wrapped = obj; </div><div class="line">        <span class="comment">// underscore对象有实例属性_wrapped，保存着obj（用户传入的待处理的数据）</span></div><div class="line">      &#125;;</div><div class="line">      </div><div class="line">root._ = _</div></pre></td></tr></table></figure>
<p>其实也很简单，判断是否为underscore的对象，是就直接返回，不是就new一下（注意： 这里不会造成死循环的原因是因为第一个判断的存在 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们来看看jquery中的无new构造，我们知道，jquery中可以通过以下两种方式来构造对象：  &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cla
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Array-Like Object in Javascript</title>
    <link href="http://yoursite.com/2016/09/25/array-like-to-array/"/>
    <id>http://yoursite.com/2016/09/25/array-like-to-array/</id>
    <published>2016-09-25T09:00:31.000Z</published>
    <updated>2016-12-08T07:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Array-Like-Object"><a href="#What-is-Array-Like-Object" class="headerlink" title="What is Array-Like Object?"></a>What is Array-Like Object?</h2><p>As we all know,everything in javascript is <strong>Object</strong>.So an array-like object is not a separate object type,it’s an object we are familiar with.Why? Maybe you often use <code>arguments</code> variable in javascript function by default.Like this:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>])</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>])</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length)</div><div class="line">&#125;</div><div class="line">foo(<span class="string">'A'</span>,<span class="string">'B'</span>)  </div><div class="line"></div><div class="line"><span class="comment">// A</span></div><div class="line"><span class="comment">// B</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>Okay,it has <code>length</code>  property right?So is it an array? No!If you push some stuff to it like this:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">arguments</span>.push(<span class="string">'C'</span>)</div><div class="line"><span class="comment">//// TypeError: Object has no method 'push'</span></div></pre></td></tr></table></figure>
<p>Then you will realize that none of the array methods, like pop(), shift(), forEach() etc work.In fact ,we call this “Array-Like”.<br>An Array-Like Object has two features:  </p>
<ul>
<li>has indexed access to elements and the property <code>length</code></li>
<li>doesn’t have array methods ,like push(),pop() etc.</li>
</ul>
<h2 id="Common-Array-Like-Objects"><a href="#Common-Array-Like-Objects" class="headerlink" title="Common Array-Like Objects"></a>Common Array-Like Objects</h2><ul>
<li>document.getElementsByClassName()</li>
<li>document.getElementsByTagName()</li>
<li>document.getElementsByName()</li>
<li>document.stylesheets</li>
<li>parentNode.chidlNodes</li>
<li>arguments</li>
<li>document.querySelectorAll()</li>
</ul>
<h2 id="Converting-an-Array-Like-Object-to-an-array"><a href="#Converting-an-Array-Like-Object-to-an-array" class="headerlink" title="Converting an Array-Like Object to an array"></a>Converting an Array-Like Object to an array</h2><p>Sometimes it’s better to convert an array-like object  to an array.A very straight method is creating an array,like this:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> array = []</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">		arr[i] = <span class="built_in">arguments</span>[i]</div><div class="line">	&#125;</div><div class="line">	array.push(<span class="number">5</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) </div><div class="line"></div><div class="line"><span class="comment">// [1,2,3,4,5]</span></div></pre></td></tr></table></figure>
<p>However, it’s not elegant at all. We can use<br>:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</div></pre></td></tr></table></figure>
<p>Or use [ ] to replace <code>array.prototype</code>:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[].slice.call(<span class="built_in">arguments</span>)</div></pre></td></tr></table></figure>
<p>The reason that slice() can convert an array-like to array, since it returns a shallow copy of elements from the original array. About the specific detail can refer to <a href="https://github.com/v8/v8/blob/master/src/js/array.js#L621-L660" target="_blank" rel="external">V8 source</a> .  </p>
<p>ES2015 provides a more convenient method <code>Array.from()</code>:</p>
<pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>{
    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)
}

fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)

<span class="comment">//[1,2,3,4]</span>
</code></pre>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.2ality.com/2013/05/quirk-array-like-objects.html" target="_blank" rel="external">JavaScript quirk 8: array-like objects</a><br><a href="http://www.hacksparrow.com/javascript-array-like-objects.html" target="_blank" rel="external">JavaScript Array-like Objects</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">MDN  Array.from()</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-Array-Like-Object&quot;&gt;&lt;a href=&quot;#What-is-Array-Like-Object&quot; class=&quot;headerlink&quot; title=&quot;What is Array-Like Object?&quot;&gt;&lt;/a&gt;What is Ar
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2016 NingJS(JSConf CN 2016) 见闻</title>
    <link href="http://yoursite.com/2016/09/06/2016-NingJS-JSConf-CN-2016/"/>
    <id>http://yoursite.com/2016/09/06/2016-NingJS-JSConf-CN-2016/</id>
    <published>2016-09-06T03:44:36.000Z</published>
    <updated>2016-12-08T07:15:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加JSconf，也是我第一次来南京这座城市，这座有着丰富的文化历史底蕴的城市。参加这次JSconf心情是十分激动的，见到来自各地的开发者，感受他们分享的经历与成长，这对我自身也有很大激励与启发。下面就是我对参加峰会的记录整理。</p>
<h2 id="9月3日"><a href="#9月3日" class="headerlink" title="9月3日"></a>9月3日</h2><h3 id="VUE-js"><a href="#VUE-js" class="headerlink" title="VUE.js"></a>VUE.js</h3><p>从出场的热烈掌声无不表明了尤小右在国内前端圈的受欢迎程度，作为首位分享的讲师，尤大大首先分享了progressive framework的概念，即  </p>
<pre><code>core －&gt; component system -&gt; routing -&gt;  large scale state management -&gt; build system -&gt; client-server data persistence  
</code></pre><p>其次回顾vue的历史，vue从最初诞生到发展成当今国内最热的框架，通过刚开始的想法然后动手去做，一步一步的积累最终达到了今天的成果。接着展望了vue2.0，vue2.0会更轻更快，并且支持virtual dom, 自动帮你做React 中的 shouldComponentUpdate。最后”weex powered by vue”也说明了vue和weex的合作。  </p>
<h3 id="HOW-TO-BUILD-A-COMPILER"><a href="#HOW-TO-BUILD-A-COMPILER" class="headerlink" title="HOW TO BUILD A COMPILER"></a>HOW TO BUILD A COMPILER</h3><p>虽然之前看过James Kyle在其他JSconf的分享视频，不过这一次亲眼见到大神还是比较激动的。首先James介绍了什么是compiler，以及一个compiler做了哪些事(parsing、transformation、code generation)，最后通过一行行代码解释了如何实现一个世界上最简单的编译器 – 实现了lisp风格的加减法到C风格的转换，不过还有很多地方不是很清楚，比如生成AST，具体我还需要下功夫去研究。其中最让人印象深刻的就是James的ppt风格了，虽然之前有过准备，不过现场看的确是 la eye(逃…<br>github仓库:<br><a href="https://github.com/thejameskyle/how-to-build-a-compiler" target="_blank" rel="external">how-to-build-a-compiler</a></p>
<h3 id="阿里node-团队开源项目，企业级框架EGG"><a href="#阿里node-团队开源项目，企业级框架EGG" class="headerlink" title="阿里node 团队开源项目，企业级框架EGG"></a>阿里node 团队开源项目，企业级框架EGG</h3><p>天猪介绍的node框架egg，基于KOA，并且提供了日志、路由、配置以及内置了web安全解决方案，还有一整套测试、集成、发布构建方案，不得不感慨企业级框架就是牛逼。<br>github仓库：<br><a href="https://github.com/eggjs/egg" target="_blank" rel="external">https://github.com/eggjs/egg</a>  </p>
<h3 id="聊聊-JS-测试框架"><a href="#聊聊-JS-测试框架" class="headerlink" title="聊聊 JS 测试框架"></a>聊聊 JS 测试框架</h3><p>主要讲了主流的测试框架，分别基于tapa流（tap、tape、ava）以及mocha流（jasmine 、mocha、jest）。最后介绍了自己基于mocha造的轮子tman。<br>github仓库：<br><a href="https://github.com/thunks/tman" target="_blank" rel="external">https://github.com/thunks/tman</a></p>
<h3 id="Gridcontrol-——-networked-process-managers"><a href="#Gridcontrol-——-networked-process-managers" class="headerlink" title="Gridcontrol —— networked process managers"></a>Gridcontrol —— networked process managers</h3><p>pm2作者Alexandre！大神就是大神，说开源就开源，而且还是现场开源，这里有关于gridcontrol的介绍：</p>
<blockquote>
<p> GridControl is a network layer built on top of PM2 allowing file synchronization, inter-process communication via an opionated PUB/SUB system and a wide-range system discovery</p>
</blockquote>
<p>github地址：<br><a href="https://github.com/gridcontrol/gridcontrol" target="_blank" rel="external">https://github.com/gridcontrol/gridcontrol</a>  </p>
<h3 id="3D-on-the-web"><a href="#3D-on-the-web" class="headerlink" title="3D on the web"></a>3D on the web</h3><p>讲师中唯一的妹子，而且英文讲的超棒。首先妹子介绍了如何使用WebGL画一个三角形，然后就是three.js的介绍，最后的demo让在场所有人感受到了web 3D的酷炫。<br>github地址：<br><a href="http://developer-autodesk.github.io" target="_blank" rel="external">http://developer-autodesk.github.io</a>  </p>
<h3 id="A-Frame-Building-Virtual-Reality-on-the-Web"><a href="#A-Frame-Building-Virtual-Reality-on-the-Web" class="headerlink" title="A-Frame, Building Virtual Reality on the Web"></a>A-Frame, Building Virtual Reality on the Web</h3><p>Kevin Ngo是WebVR的布道者，也是A-Frame的核心开发成员。WebVR的概念对我来说是非常新颖的，首先Kevin介绍了WebVR以及WebVR的一些现状<br>其次介绍了一个基于three.js的框架－－A-Frame，通过声明式的HTML来创建场景。比如实现 一个3D盒子：</p>
<pre><code>&lt;a-scene&gt;
      &lt;a-box position=&quot;-1 0.5 1&quot; rotation=&quot;0 45 0&quot; width=&quot;1&quot; height=&quot;1&quot; depth=&quot;1&quot;  color=&quot;#4CC3D9&quot;&gt;&lt;/a-box&gt;
      &lt;a-plane rotation=&quot;-90 0 0&quot; width=&quot;4&quot; height=&quot;4&quot; color=&quot;#7BC8A4&quot;&gt;&lt;/a-plane&gt;

      &lt;a-sky color=&quot;#ECECEC&quot;&gt;&lt;/a-sky&gt;
      &lt;a-entity position=&quot;0 0 3.8&quot;&gt;
        &lt;a-camera&gt;&lt;/a-camera&gt;
      &lt;/a-entity&gt;
&lt;/a-scene&gt;
</code></pre><p>具体可以参考官方地址：<br><a href="https://aframe.io" target="_blank" rel="external">https://aframe.io</a></p>
<h3 id="Building-a-Unified-Frontend-and-Mobile-Team"><a href="#Building-a-Unified-Frontend-and-Mobile-Team" class="headerlink" title="Building a Unified Frontend and Mobile Team"></a>Building a Unified Frontend and Mobile Team</h3><p>这个分享主要说的是react,react native的，介绍了通过UI层的虚拟机，来屏蔽各端的差异，用RN搞定web、android、ios三端的开发，不过即使如此，这还是不能抛开原生的影响，也就是说未来RN可以融合其他端，但是这只是在某些特定的业务场景下。  </p>
<h3 id="Building-asynchronous-microservices-that-get-along"><a href="#Building-asynchronous-microservices-that-get-along" class="headerlink" title="Building asynchronous microservices that get along"></a>Building asynchronous microservices that get along</h3><p> 讲师解释了microservices的概念，以及microservices的交互（restful接口，消息中间件、任务系统），然后是microservices面临的一些问题（请求变重、API数量暴增），最后以订单&amp;支付为例子，介绍了一些问题以及解决方案。</p>
<p> 最后附上我和大神的合影:)</p>
<p> <img src="https://avatars1.githubusercontent.com/u/11830681?v=3&amp;s=460" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次参加JSconf，也是我第一次来南京这座城市，这座有着丰富的文化历史底蕴的城市。参加这次JSconf心情是十分激动的，见到来自各地的开发者，感受他们分享的经历与成长，这对我自身也有很大激励与启发。下面就是我对参加峰会的记录整理。&lt;/p&gt;
&lt;h2 id=&quot;9月3日&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Event Loop in Javascript</title>
    <link href="http://yoursite.com/2016/08/16/Understanding-Event-Loop/"/>
    <id>http://yoursite.com/2016/08/16/Understanding-Event-Loop/</id>
    <published>2016-08-16T06:58:53.000Z</published>
    <updated>2016-12-11T09:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间看了 Philip Roberts 关于event-loop的演讲视频收获良多:</p>
<blockquote>
<p>传送门：<br>YouTube:<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="external"> Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014</a><br>Vimeo: <a href="https://vimeo.com/96425312" target="_blank" rel="external">Philip Roberts: Help, I’m stuck in an event-loop</a></p>
</blockquote>
<p>本文主要是自己对<code>event loop</code>模型的总结和整理。</p>
<h2 id="JavaScript-Runtime"><a href="#JavaScript-Runtime" class="headerlink" title="JavaScript Runtime"></a>JavaScript Runtime</h2><p>我们知道web应用在浏览器中运行会涉及到一系列比如<code>JS runtime</code>、<code>event loop</code>、<code>dom</code>、<code>ajax</code>等等技术，而在弄明白<code>event loop</code>之前我们必须先了解一下<code>JS Runtime</code>的基本作用。 </p>
<p>如今业内领头的<code>JS Runtime</code>非Chrome的V8莫属了，下图简要的概括了<code>JS Runtime</code>是个什么样子：  </p>
<p><img src="http://image.beekka.com/blog/2014/bg2014100802.png" alt="">  </p>
<p>其中<code>heap</code>、<code>stack</code>、<code>callback queue</code>、<code>event loop</code>是JS引擎基本的特征，而关于DOM、ajax、Timer等则属于<strong>Web APIs</strong>。</p>
<h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><p>JS是单线程的，即只有一个主线程。而当主线程运行时，<code>JS Runtime</code>会产生<strong>heap</strong>和<strong>stack</strong>，其中：  </p>
<p><code>heap</code>: 主要存放着一系列对象，表示的是内存中大未组织的区域，并且不同的浏览器提供不同的优化。 </p>
<p><code>stack</code> : 函数调用时形成的堆栈，我们知道栈这种数据结构是后进先出的，每当函数调用的时候，就将函数（称为<em>帧</em>）压入栈内，函数调用完则从栈内推出。一旦栈空，就会等待<code>callback queue</code>提供下一帧。比如:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a * b</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> multiply(n,n)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printSquare</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> squared = square(<span class="number">4</span>)</div><div class="line">  <span class="built_in">console</span>.log(squared)</div><div class="line">&#125;</div><div class="line"></div><div class="line">printSquare(<span class="number">4</span>)</div></pre></td></tr></table></figure>
<p>首先调用<code>printSquare()</code>的时候，创建第一个堆栈帧，包含参数和局部变量，当<code>printSquare()</code>调用<code>square()</code>时，压入第二个堆栈帧，当<code>square()</code>调用<code>multiply()</code>的时候压入第三个堆栈帧，接着函数返回从栈中依次推出。将过程可视化为:  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/eventloop2.gif" alt=""></p>
<p>这就是我们所说的<strong>调用栈（Call Stack）</strong>，<code>JS Runtime</code>每次只是逐行执行代码。</p>
<h4 id="Callback-Queue"><a href="#Callback-Queue" class="headerlink" title="Callback Queue"></a>Callback Queue</h4><p>我们知道任务主要分为<strong>同步任务（synchronous）</strong> 和 <strong>异步任务（asynchronous）</strong>。同步任务主要是在主线程中执行，而当JS引擎执行异步任务的时候(如<code>setTimeout()</code>、<code>onclick()</code>)，浏览器内核相应模块（即WebAPIs）会处理相关的方法，达到触发条件后相关联的回调函数便会添加到<strong>Callback Queue</strong>中。当执行栈的代码执行完毕就会读取<strong>Callback Queue</strong>，依次执行相关的回调函数。</p>
<h4 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h4><p>之所以称为<code>Event loop</code>，是因为JS运行时会创建类似于这样的循环:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(queue.waitForMessage())&#123;</div><div class="line">  queue.processNextMessage();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每执行一次循环体称为一次<code>Tick</code>，每次<code>Tick</code>的过程就是查看<code>Callback Queue</code>中是否有待处理的<code>Message</code>，如果有则取出来放入执行栈中由主线程执行。</p>
<h4 id="WebAPIs"><a href="#WebAPIs" class="headerlink" title="WebAPIs"></a>WebAPIs</h4><p>主要是一些异步操作，比如<code>DOM Binding</code>、<code>ajax</code>、<code>timer</code>，这些异步操作由浏览器内核的<code>webcore</code>来执行。  </p>
<h2 id="Block-amp-Non-Block"><a href="#Block-amp-Non-Block" class="headerlink" title="Block &amp; Non-Block"></a>Block &amp; Non-Block</h2><p>没有非常严格的定义什么是阻塞的什么是非阻塞的，不过我们知道JS执行代码是通过<code>Call Stack</code>这项技术，比如以下代码:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = $.getSync(<span class="string">'//foo.com'</span>)</div><div class="line"><span class="keyword">var</span> bar = $.getSync(<span class="string">'//bar.com'</span>)</div><div class="line"><span class="keyword">var</span> qux = $.getSync(<span class="string">'//qux.com'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo)</div><div class="line"><span class="built_in">console</span>.log(bar)</div><div class="line"><span class="built_in">console</span>.log(qux)</div></pre></td></tr></table></figure>
<p><code>foo()</code>压入栈内，调用完后出栈，接着<code>bar</code>压入栈内…  </p>
<p>熟悉JS的人都知道这段代码是阻塞的，一个请求完成才会去执行下一个请求。如果在浏览器内，一个页面进行热请求过长，页面其他部分就不能操作，显然这样的用户体验是非常差的，那么解决办法是什么？使用异步回调函数，比如使用<code>setTimeout()</code>:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span>)</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">'Here'</span>)&#125;, <span class="number">5000</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'World'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 'Hello'</span></div><div class="line"><span class="comment">// 'World'</span></div><div class="line"><span class="comment">// 'Here'</span></div></pre></td></tr></table></figure>
<p>这就是为什么JS不阻塞的原因了，当执行异步函数<code>setTimeout()</code>并不会阻塞下面函数的执行，等异步函数达到触发条件后(上面例子是500ms后)在执行回调函数。那这里就有一个问题，异步函数具体是怎么样工作的呢，调用异步函数后，相应的回调函数又是放在哪？问题的答案就是Event Loop模型。</p>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>这里可以使用Phi写的一个可视化工具<a href="https://github.com/latentflip/loupe" target="_blank" rel="external">loupe</a>，具体来看一下上面异步代码是怎么样运作的:  </p>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/eventloop3.gif" alt=""></p>
<p>上图中，首先在<code>Call Stack</code>中压入<code>console.log(&#39;Hello&#39;)</code>的方法，这只是一个普通方法，所以该方法会立即出栈执行。</p>
<p>接着继续往下执行<code>setTimeout()</code>，这是一个<code>WebAPIs</code>的方法，也就是异步方法，<code>JS runtime</code>会将延迟函数交给浏览器内核相应模块处理(这里是<code>timer</code>模块)，然后立即继续往下执行代码。  </p>
<p>这时<code>setTimeout()</code>执行5秒后，timer模块检测到延时处理方法到达触发条件，于是将相应的回调函数加入任务队列。而这个时候<code>Call Stack</code>为空，所以通过<code>event loop</code>轮询检查任务队列是否有回调函数，检查到<code>timeout()</code>，将其压入<code>Call Stack</code>，接着检测到<code>console.log(&#39;Here&#39;)</code>方法继续压入栈，最后出栈执行。  </p>
<p><code>DOM</code>操作、<code>ajax</code>等都是一样的原理，这些都是由浏览器内核相应模块来处理。  </p>
<h2 id="感触"><a href="#感触" class="headerlink" title="感触"></a>感触</h2><p>最大感触便是学习应该刨根问底，抱着强烈的好奇心去学，就像Phi做的一样，我们经常会听到javascript中的single-threaded、callback等概念，但是真正花时间去研究callback或者javascript如何运作的人却很少。所以学习应该是追根溯源、敢于探索。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://altitudelabs.com/blog/what-is-the-javascript-event-loop/" target="_blank" rel="external">Willson Mock - What is the JavaScript Event Loop?</a></li>
<li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="external"> Philip Roberts: What the heck is the event loop anyway? | JSConf EU 2014</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间看了 Philip Roberts 关于event-loop的演讲视频收获良多:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传送门：&lt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Web Real-time Connection</title>
    <link href="http://yoursite.com/2016/08/02/Web-Real-Time-Connection/"/>
    <id>http://yoursite.com/2016/08/02/Web-Real-Time-Connection/</id>
    <published>2016-08-02T13:30:13.000Z</published>
    <updated>2016-12-08T07:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于web实时通信，我们都知道通常是使用长轮询或者长连接这种方式。 本文是对几种web实时通信进行简单的总结介绍，仅供参考。</p>
<h3 id="Ajax-long-polling"><a href="#Ajax-long-polling" class="headerlink" title="Ajax long polling"></a>Ajax long polling</h3><p>传统的轮询方式是客户端定时(一般使用setInterval)向服务器发送ajax请求，服务器收到请求后马上响应信息。这种方式在客户端和服务端都很好实现，但是会造成很多无用的请求，当服务器没有可返回的数据时，这次请求就浪费了。<br>而长轮询，则是客户端向服务器发送Ajax请求，<strong>服务器接到请求后保持住连接</strong>，直到有新消息才返回响应信息，客户端处理完响应信息后再向服务器发送新的请求。<br>当然使用长轮询，客户端和服务端需要具备以下的条件:  </p>
<ul>
<li>客户端在收到服务器的响应后，需要向服务器发送新的请求，从而达到轮询的效果  </li>
<li>服务器端要能够一直保持住客户端的请求，直到有响应消息；同时服务器对请求的处理要支持非阻塞模式  </li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/websocket1.png" alt=""></p>
<h3 id="Server-sent-Events-SSE"><a href="#Server-sent-Events-SSE" class="headerlink" title="Server-sent Events(SSE)"></a>Server-sent Events(SSE)</h3><p>SSE是HTML5规范的一个组成部分，简单点说，就是客户端向服务端发送一个HTTP请求，然后服务端不断<strong>单向</strong>地向客户端推送信息(message)。这种信息在格式上也很简单，就是“信息”加上前缀“data: ”，然后以“\n\n”结尾: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl http://example.com/dates</div><div class="line">data: 1394572346452</div><div class="line"></div><div class="line">data: 1394572347457</div><div class="line"></div><div class="line">data: 1394572348463</div><div class="line"></div><div class="line">^C</div></pre></td></tr></table></figure>
<p>也就是说，当数据源有新数据的时候，服务器端能立刻发送给一个或多个客户端，而不用等客户端来请求，这些新数据可能是实时新闻、最新股票、上线朋友的聊天信息等等。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/websocket2.png" alt=""></p>
<h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p>在HTML5中，还提供了一种叫做Websocket的技术，它不仅仅是一种web通信方式，而且也是一种应用层的协议。 它和前文提到的SSE一样都是用来建立客户端和服务端之间的通信渠道，不过两者最大的区别在于： </p>
<ul>
<li><p>Websocket提供了客户端和服务端之间的全双工跨域通信，在同一时刻能够实现客户端到服务器和服务器到客户端的数据发送;而SSE是单向通道，只能服务器向浏览器端发送;</p>
</li>
<li><p>Websocket是一个新的协议（其实是基于TCP协议），需要服务端的支持；而SSE则是部署在HTTP协议之上的</p>
</li>
<li>SSE是一个轻量级协议，相对简单；WebSocket是一种较重的协议，相对复杂。</li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/websocket3.png" alt="">  </p>
<p>可以看出，两者虽然功能相似，但是各有特点，适合于不同的场合。关于更多websocket的内容，可以参考<a href="http://www.websocket.org/aboutwebsocket.html" target="_blank" rel="external">websocket.org</a>   </p>
<h3 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h3><p>因为不是所有浏览器都支持Websocket标准，所以为了解决这个问题，Socket.io便诞生了。<br>Socket.io是基于node.js生态系统，是对Node.js关于支持WebSocket协议所有API的封装和拓展，完全由js实现。<br>同时，Socket.io设计的目标是支持任何的浏览器和任何设备。于是在接口方面，Socket.io统一了通信的API，在内部支持一系列降级功能：  </p>
<ul>
<li>WebSocket</li>
<li>AJAX long-polling </li>
<li>AJAX multipart streaming</li>
<li>Forever Iframe</li>
<li>Adobe® Flash® Socket</li>
<li>JSONP Polling</li>
</ul>
<p>也就是说，Socket.io会根据环境来选择适合的通信方式。这点是十分强大的。<br>而搭建Socket.io环境也十分简单，首先需要创建一个作为工作空间的目录，然后安装Node.js，并在工作空间下安装Socket.io(命令：npm install socket.io)，这样环境已经搭建完成。还可以安装基于Node.js框架(如Express.js等)以协助应用的服务器端开发。   具体可以参考我用<a href="http://socket.io" target="_blank" rel="external">socket.io</a> &amp;&amp; express 写的一个<a href="https://github.com/stephenLYao/chatroom" target="_blank" rel="external">简易的聊天室</a>程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于web实时通信，我们都知道通常是使用长轮询或者长连接这种方式。 本文是对几种web实时通信进行简单的总结介绍，仅供参考。&lt;/p&gt;
&lt;h3 id=&quot;Ajax-long-polling&quot;&gt;&lt;a href=&quot;#Ajax-long-polling&quot; class=&quot;headerl
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>初识WebPageTest</title>
    <link href="http://yoursite.com/2016/07/27/%E5%88%9D%E8%AF%86WebpageTest/"/>
    <id>http://yoursite.com/2016/07/27/初识WebpageTest/</id>
    <published>2016-07-27T05:30:04.000Z</published>
    <updated>2016-11-23T16:36:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本上在讨论网站性能分析工具的时候，就一定会提到<a href="http://www.webpagetest.org" target="_blank" rel="external">WebpageTest</a>这个工具，顾名思义，它的核心是测量以及分析一个网站的性能，下面以我参与的一个产品<a href="book.muxistudio.com">木犀图书</a>为例，介绍一下WebPageTest的内容。  </p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>当你输入你想要测量的网站后，等待一段时间（可能是喝一口咖啡的时间），就会出现网站一些关键数据信息的展示，右上角是对一些重要的性能优化评分，其中包括Keep-alive Enabled、Compress Text、Compress Images、Cache Static Content、Combine JS/CSS Files以及Use of CDN。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage1.png" alt="">  </p>
<ul>
<li>下方就是一些关键的数据信息展示，包含 Load Time、First Byte、Start Render、DOM Elements 等 ，其中最大的特点就是会分为 <strong>首次加载以及再次加载</strong></li>
</ul>
<blockquote>
<p>note: 首次加载是指浏览器中的缓存以及cookie全部清除，即第一次浏览该网页；再次加载是指在首次加载的基础上没有清除任何东西的加载网页。</p>
</blockquote>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage2.png" alt="">  </p>
<ul>
<li>除此之外，detail选项中会展现每个请求不同阶段占用时间对比，类似于Chrome浏览器的瀑布流，以及每个请求的 detail、request、response、object 信息。</li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage3.png" alt="">  </p>
<ul>
<li>Performance Review,一些刚提过的必要性能检查，关于每个性能的解释可以查看<a href="https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/quick-start-quide#TOC-Optimization-Grades:" target="_blank" rel="external">文档</a>  </li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage4.png" alt=""></p>
<ul>
<li>Content breakdown, 不同资源的请求数以及请求类型 </li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage5.png" alt=""></p>
<ul>
<li>Domains,域名分析，域名越多消耗的 DNS 查询时间就越长。由于这个产品只有一个域名，所以只显示一个</li>
</ul>
<p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/webpage6.png" alt=""></p>
<p>个人认为，这个工具的优点有这几点:</p>
<ul>
<li>内容上，首次加载以及再次加载的对比可以让性能优化更具有针对性，测量标准也是按照最佳实践，比如Compress Images、Cache Static Content等。</li>
<li>展示上，各项加载时间指标以及图表、瀑布图的使用让数据更为直观。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本上在讨论网站性能分析工具的时候，就一定会提到&lt;a href=&quot;http://www.webpagetest.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebpageTest&lt;/a&gt;这个工具，顾名思义，它的核心是测量以及分析一个网站的性能，下
    
    </summary>
    
    
      <category term="web性能" scheme="http://yoursite.com/tags/web%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Module.exports vs Exports in Node.js</title>
    <link href="http://yoursite.com/2016/07/25/module.exports%20vs%20exports%20in%20Node.js/"/>
    <id>http://yoursite.com/2016/07/25/module.exports vs exports in Node.js/</id>
    <published>2016-07-24T16:00:00.000Z</published>
    <updated>2016-12-08T07:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在折腾node.js的时候，经常会看到类似<code>exports.xxx = yyy</code>以及<code>module.exports = yyy</code>这样的代码，可实际上如果通过require()函数来引用模块就会有报错的情况，所以到底是什么原因造成的呢？这两者又有什么区别？<br>关于两者的区别，了解了下面几点就会非常的清楚:</p>
<ul>
<li><code>exports</code> 是 <code>module.exports</code> 的一个引用 <code>exports = module.exports = {}</code></li>
<li><code>require()</code>返回的是<code>module.exports</code> 而不是 <code>exports</code></li>
<li><code>exports.xxx</code> 相当于在导出对象上挂属性，该属性对调用模块直接可见</li>
<li><code>exports =</code>相当于给exports对象重新赋值，调用模块不能访问<code>exports</code> 对象及其属性</li>
<li>如果此模块是一个类，就应该直接赋值给<code>module.exports</code>,这样调用者就是一个类构造器，可以直接使用new实例化；如果只导出简单的属性，可以直接挂载到<code>exports</code>上</li>
</ul>
<p>比如以下代码计算圆的面积：</p>
<p><strong>使用exports</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// circle.js</span></div><div class="line">exports.area = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> r*r*<span class="number">3</span></div><div class="line">&#125; ;</div><div class="line"></div><div class="line"><span class="comment">//app.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> circle = <span class="built_in">require</span>(<span class="string">'./circle'</span>)</div><div class="line"><span class="built_in">console</span>.log(circle.area(<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment">//输出 '12'</span></div></pre></td></tr></table></figure>
<p><strong>使用module.exports</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// area.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> r*r*<span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//app.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> area = <span class="built_in">require</span>(<span class="string">'./area'</span>)</div><div class="line"><span class="built_in">console</span>.log(area(<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment">//输出 '12'</span></div></pre></td></tr></table></figure>
<p>两者输出是一样的，因为<code>exports</code>是<code>module.exports</code>的一个引用，所以两者指向的内存地址是一样的，可是如果你这样写:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// area.js</span></div><div class="line">exports = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> r*r*<span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//app.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> area = <span class="built_in">require</span>(<span class="string">'./area'</span>)</div><div class="line"><span class="built_in">console</span>.log(area(<span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment">//输出 'TypeError: object is not a function'</span></div></pre></td></tr></table></figure>
<p>我们可以看到是报错的，原因在于，之前说过<code>require()</code>返回的只是<code>module.exports</code>,而<code>exports</code>是<code>module.exports</code>的一个引用，上面代码给<code>exports</code>重新赋值，使其指向了新的内存地址，此时<code>exports</code>和<code>module.exports</code>毫无关系，也就是说此时<code>module.exports</code>的值为默认值{}，所以导出的是一个空对象。   </p>
<p>也就是说，<code>module.exports</code>才是关键，而<code>exports</code>只是起辅助的作用,最终导出来的是<code>module.exports</code>上挂载的对象，当<code>module.exports</code>没有任何值时，<code>exports</code>挂载的属性会赋值给<code>module.exports</code>, 当<code>module.exports</code>具有挂载的对象时，<code>exports</code>上的所有值会被忽略，比如以下代码只输出了<code>module.exports</code>所挂载的属性:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//rock.js</span></div><div class="line"><span class="built_in">module</span>.exports.name = <span class="string">'Stephen'</span></div><div class="line">exports.name = <span class="string">'Mike'</span></div><div class="line"></div><div class="line"><span class="comment">//app.js</span></div><div class="line"><span class="keyword">var</span> rock = <span class="built_in">require</span>(<span class="string">'./rock.js'</span>)</div><div class="line">rock.name</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="string">'Stephen'</span></div></pre></td></tr></table></figure>
<p>总结一下:</p>
<ul>
<li>如果要导出非对象接口（属性），可以直接使用<code>exports</code></li>
<li>如果要导出对象接口(类)，应该将其挂载到<code>module.exports</code>上面，从而可以直接让调用者new实例化对象</li>
</ul>
<p>参考：<br><a href="https://cnodejs.org/topic/5231a630101e574521e45ef8" target="_blank" rel="external">exports 和 module.exports 的区别</a><br><a href="http://www.hacksparrow.com/node-js-exports-vs-module-exports.html" target="_blank" rel="external">node-js-exports-vs-module-exports</a><br><a href="http://www.ghostchina.com/module-exports-and-exports-in-node-js/" target="_blank" rel="external">module-exports-and-exports-in-node-js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在折腾node.js的时候，经常会看到类似&lt;code&gt;exports.xxx = yyy&lt;/code&gt;以及&lt;code&gt;module.exports = yyy&lt;/code&gt;这样的代码，可实际上如果通过require()函数来引用模块就会有报错的情况，所以到底是什么原因造
    
    </summary>
    
    
      <category term="nodeJs" scheme="http://yoursite.com/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap之CSS源码分析</title>
    <link href="http://yoursite.com/2016/02/05/bootstrap-CSS-source-analysis/"/>
    <id>http://yoursite.com/2016/02/05/bootstrap-CSS-source-analysis/</id>
    <published>2016-02-05T02:18:40.000Z</published>
    <updated>2016-07-25T08:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p><a href="http://getbootstrap.com/2.3.2/" target="_blank" rel="external">Bootstrap</a>作为到目前为止世界上最流行的CSS开发框架吸引了很多开发者。不过对于前端开发者来说，我觉得bootstrap的意义还是在于其代码设计理念以及思路。这篇post主要分析其中的部分CSS源码(版本是<strong>bootstrap-4.0.0-alpha</strong>，其中CSS具体数据可以通过<a href="http://www.cssstats.com" target="_blank" rel="external">css stats</a>测得）。Bootstrap3版本之前是基于Less来编译的，但到了4.0-alpha版本就开始正式使用Sass。<br>我们可以看到scss目录结构大致是这样的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">bootstrap/</div><div class="line">|– bootstrap.scss   # Manifest file </div><div class="line">|– _alerts.scss     # Component file </div><div class="line">|– _buttons.scss    # Component file </div><div class="line">|– _mixins.scss     # Mixin file – imports all files from mixins folder</div><div class="line">|–  ...             # Etc..</div><div class="line">|– mixins/</div><div class="line">|  |–  _alerts.scss # Alert mixin</div><div class="line">|  |– _buttons.scss # Button mixin</div><div class="line">|  |– ...           # Etc.</div></pre></td></tr></table></figure>
<p>从整体的文件结构也可以看出bootstrap组件化以及层次化的特点。<br>接下来我将从三个方面进行分析：  </p>
<ul>
<li>CSS Specificity Graph</li>
<li>Grid源码分析</li>
<li>Normalize.css</li>
</ul>
<h3 id="一、CSS-Specificity-Graph"><a href="#一、CSS-Specificity-Graph" class="headerlink" title="一、CSS Specificity Graph"></a>一、CSS Specificity Graph</h3><p>Bootstrap中CSS选择器的类型就有两千多种，我们知道在构建自己项目的时候，有一个问题我们必须十分注意：<strong>CSS Specificity</strong>。这时候我们可以利用一个可视化工具－－<a href="https://jonassebastianohlsson.com/specificity-graph/" target="_blank" rel="external">CSS Specificity Graph</a>来大致的查看整个项目的CSS Specificity。我认为Bootstrap中CSS Specificity分布还是比较合理的，从整体上看Bootstrap中CSS Specificity大致分布是这样的：<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-03%2011.59.37.png" alt="曲线"><br>曲线比较粗略的描绘了整个CSS Specificity的分布情况，x轴指的选择器，y轴是权重值。现在我们来分析一下这条曲线，整体上看权重值主要分布在中段（20～30），而最高值达到了60，最低值为1。<br>在前一小段，我们可以清楚的看到权重值普遍低于10，类似于这样类型的选择器：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//权重为1</span></div><div class="line"><span class="selector-tag">html</span> </div><div class="line"><span class="selector-tag">body</span>  </div><div class="line"><span class="selector-tag">article</span>,</div><div class="line"><span class="selector-tag">aside</span>,</div><div class="line"><span class="selector-tag">details</span>,</div><div class="line"><span class="selector-tag">figcaption</span>,</div><div class="line"><span class="selector-tag">figure</span>,</div><div class="line"><span class="selector-tag">footer</span>,</div><div class="line"><span class="selector-tag">header</span>,</div><div class="line"><span class="selector-tag">hgroup</span>,</div><div class="line">main,</div><div class="line">menu,</div><div class="line">....</div><div class="line"><span class="comment">//权重为10左右</span></div><div class="line"><span class="selector-tag">html</span> <span class="selector-tag">input</span><span class="selector-attr">[type="button"]</span>, </div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="reset"]</span>,</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="submit"]</span>,</div><div class="line"><span class="selector-tag">abbr</span><span class="selector-attr">[data-original-title]</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>也就是前部分基本上是一些元素或属性选择器。而到了中间有一段平缓区，这部分是栅格系统的选择器:  </p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-xs-1</span>,<span class="selector-class">.col-sm-1</span>,<span class="selector-class">.col-md-1</span>,<span class="selector-class">.col-lg-1</span>,</div><div class="line"><span class="selector-class">.col-xs-2</span>,<span class="selector-class">.col-sm-2</span>,<span class="selector-class">.col-md-2</span>,<span class="selector-class">.col-lg-2</span>,</div><div class="line"><span class="selector-class">.col-xs-3</span>,<span class="selector-class">.col-sm-3</span>,<span class="selector-class">.col-md-3</span>,<span class="selector-class">.col-lg-3</span>,</div><div class="line"><span class="selector-class">.col-xs-4</span>,<span class="selector-class">.col-sm-4</span>,<span class="selector-class">.col-md-4</span>,<span class="selector-class">.col-lg-4</span>,</div><div class="line"><span class="selector-class">.col-xs-5</span>,<span class="selector-class">.col-sm-5</span>,<span class="selector-class">.col-md-5</span>,<span class="selector-class">.col-lg-5</span>,</div><div class="line"><span class="selector-class">.col-xs-6</span>,<span class="selector-class">.col-sm-6</span>,<span class="selector-class">.col-md-6</span>,<span class="selector-class">.col-lg-6</span>,</div><div class="line"><span class="selector-class">.col-xs-7</span>,<span class="selector-class">.col-sm-7</span>,<span class="selector-class">.col-md-7</span>,<span class="selector-class">.col-lg-7</span>,</div><div class="line">...</div></pre></td></tr></table></figure>
<p>随后就是相对复杂的各组件选择器：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最低达到10</span></div><div class="line"><span class="selector-class">.btn</span>,</div><div class="line"><span class="selector-class">.btn-link</span>,</div><div class="line"><span class="selector-class">.form-control</span>,</div><div class="line">....</div><div class="line"></div><div class="line"><span class="comment">//最高达到60</span></div><div class="line"><span class="selector-class">.btn-group</span> &gt; <span class="selector-class">.btn-group</span>:last-child:not(:first-child) &gt; <span class="selector-class">.btn</span>:first-child</div><div class="line"><span class="selector-class">.btn-group-vertical</span> &gt; <span class="selector-class">.btn-group</span>:first-child:not(:last-child) &gt; <span class="selector-class">.dropdown-toggle</span></div><div class="line"><span class="selector-class">.btn-group</span> &gt; <span class="selector-class">.btn</span>:not(:first-child):not(:last-child):not(<span class="selector-class">.dropdown-toggle</span>)</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>总体来说整个曲线是向上的趋势，不过问题也很明显，也就是曲线比较曲折，而我们说一个良好的权重曲线是平缓且向上趋势的，即把权重低的选择器放在最前面，高权重的选择器放在后面，也就是说我们希望曲线不会出现尖峰。由于bootstrap使用的是组件化的思想，所以我们再具体化分别对button、nav、list、table组件进行分析：</p>
<div class="row"><div class="col-sm-6">button组件</div><div class="col-sm-6">nav组件</div></div><br><div class="row"><br><div class="col-sm-6"><img src="http://7xl0rs.com1.z0.glb.clouddn.com/btn.png" alt="btn"></div><div class="col-sm-6"><img src="http://7xl0rs.com1.z0.glb.clouddn.com/nav.png" alt="nav"></div><br></div><br><div class="row"><div class="col-sm-6">table组件</div><div class="col-sm-6">list组件</div></div><br><div class="row"><br><div class="col-sm-6"><img src="http://7xl0rs.com1.z0.glb.clouddn.com/table.png" alt="btn"></div><div class="col-sm-6"><img src="http://7xl0rs.com1.z0.glb.clouddn.com/list.png" alt="nav"></div><br></div>

<p>每个组件曲线依然是相对曲折的，不过我们发现CSS Specificity的分布具有一定周期性，尤其是button组件特别明显。原因其实也很简单－－组件中还分为更小的组件(也不完全叫做组件)，比如以button为例：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.btn还分为更小的部分</span></div><div class="line">...</div><div class="line"><span class="selector-class">.btn-primary</span>&#123;&#125;</div><div class="line">...</div><div class="line"><span class="selector-class">.btn-danger</span>&#123;&#125;</div><div class="line">...</div><div class="line"><span class="selector-class">.btn-info</span>&#123;&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这也是为什么每到一个阶段就会出现一个最低点,我们以<code>.btn-primary</code>为例来看一下更为小的组件：<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/btn-primary.png" alt="btn-primary">  </p>
<p>其中源代码为：  </p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.btn-primary</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#0275d8</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#0275d8</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-primary</span>:focus,</div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.focus</span>,</div><div class="line"><span class="selector-class">.btn-primary</span>:active,</div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.active</span>,</div><div class="line"><span class="selector-class">.open</span> &gt; <span class="selector-class">.btn-primary</span><span class="selector-class">.dropdown-toggle</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#025aa5</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#01549b</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-primary</span>:hover &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#025aa5</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#01549b</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-primary</span>:active,</div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.active</span>,</div><div class="line"><span class="selector-class">.open</span> &gt; <span class="selector-class">.btn-primary</span><span class="selector-class">.dropdown-toggle</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.disabled</span>:focus,</div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.disabled</span><span class="selector-class">.focus</span>,</div><div class="line"><span class="selector-class">.btn-primary</span>:disabled:focus,</div><div class="line"><span class="selector-class">.btn-primary</span>:disabled<span class="selector-class">.focus</span>,</div><div class="line"><span class="selector-tag">fieldset</span><span class="selector-attr">[disabled]</span> <span class="selector-class">.btn-primary</span>:focus,</div><div class="line"><span class="selector-tag">fieldset</span><span class="selector-attr">[disabled]</span> <span class="selector-class">.btn-primary</span><span class="selector-class">.focus</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#0275d8</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#0275d8</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-primary</span><span class="selector-class">.disabled</span>:hover,</div><div class="line"><span class="selector-class">.btn-primary</span>:disabled:hover,</div><div class="line"><span class="selector-tag">fieldset</span><span class="selector-attr">[disabled]</span> <span class="selector-class">.btn-primary</span>:hover &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#0275d8</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#0275d8</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从曲线可以看到小组件的趋势是相对平缓且上升的，这也说明bootstrap的权重曲线设计是比较合理的。而我们在构建自己的项目的时候，最合适的模式就是使得项目的CSS Specificity曲线平缓且上升的趋势，避免出现尖峰的情况。<br>想了解更多有关css specificity graph，可以看<a href="http://csswizardry.com/2014/10/the-specificity-graph/" target="_blank" rel="external">这篇文章</a>。</p>
<h3 id="二、Grid-System"><a href="#二、Grid-System" class="headerlink" title="二、Grid System"></a>二、Grid System</h3><p>在分析Bootstrap的Grid Systemt之前我们先看一下_variables.scss中所涉及的变量：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//_variables.scss</span></div><div class="line"><span class="variable">$grid-breakpoints</span>: (</div><div class="line">  // Extra small screen / phone</div><div class="line">  xs: <span class="number">0</span>,</div><div class="line">  // Small screen / phone</div><div class="line">  sm: <span class="number">34em</span>,</div><div class="line">  // Medium screen / tablet</div><div class="line">  md: <span class="number">48em</span>,</div><div class="line">  // Large screen / desktop</div><div class="line">  lg: <span class="number">62em</span>,</div><div class="line">  // Extra large screen / wide desktop</div><div class="line">  xl: <span class="number">75em</span></div><div class="line">) !default;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Grid containers</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 对于不同的屏幕尺寸设置'.container'的最大宽度</span></div><div class="line"></div><div class="line"><span class="variable">$container-max-widths</span>: (</div><div class="line">  sm: <span class="number">34rem</span>,    // <span class="number">480</span></div><div class="line">  md: <span class="number">45rem</span>,    // <span class="number">720</span></div><div class="line">  lg: <span class="number">60rem</span>,    // <span class="number">960</span></div><div class="line">  xl: <span class="number">72.25rem</span>  // <span class="number">1140</span></div><div class="line">) !default;</div><div class="line"></div><div class="line">``` </div><div class="line">其中<span class="variable">$grid-breakpoints</span>的作用是当你选择哪种方式布局时，从而让Grid系统适应各种屏幕尺寸。我们都知道Grid总列数为12列，列与列的宽度为30px(30px分为两部分，分别应用与相邻的两列),这是通过以下变量定义：</div><div class="line"></div><div class="line">```scss</div><div class="line"></div><div class="line"><span class="comment">// Grid columns</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 设置列数以及列与列之间的间隔</span></div><div class="line"></div><div class="line"><span class="variable">$grid-columns</span>:               <span class="number">12</span> !default;</div><div class="line"><span class="variable">$grid-gutter-width</span>:          <span class="number">1.875rem</span> !default; <span class="comment">// 30px</span></div></pre></td></tr></table></figure>
<p>Bootstrap提供两种布局：固定布局与流式布局,实际上就是在外面加了一个容器(container)，固定布局就是container的宽度时固定的，流式布局的container是自适应的。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//_grid.scss</span></div><div class="line"><span class="comment">// 设置container的固定宽度</span></div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  @<span class="keyword">include</span> make-container();</div><div class="line"></div><div class="line">  <span class="comment">//对于不同的屏幕尺寸，通过媒体查询来定义每个container的最大宽度</span></div><div class="line">  @<span class="keyword">each</span> <span class="variable">$breakpoint</span>, <span class="variable">$container-max-width</span> in <span class="variable">$container-max-widths</span> &#123;</div><div class="line">    @<span class="keyword">include</span> media-breakpoint-up(<span class="variable">$breakpoint</span>) &#123;</div><div class="line">      <span class="attribute">max-width</span>: <span class="variable">$container-max-width</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Fluid container</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//利用mixin的方法来设置流式布局</span></div><div class="line"></div><div class="line"><span class="selector-class">.container-fluid</span> &#123;</div><div class="line">  @<span class="keyword">include</span> make-container();</div><div class="line">&#125;</div><div class="line"><span class="comment">// Row</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 定义row并且清楚列与列之间的浮动</span></div><div class="line"></div><div class="line"><span class="selector-class">.row</span> &#123;</div><div class="line">  @<span class="keyword">include</span> make-row();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Columns</span></div><div class="line"></div><div class="line">@<span class="keyword">include</span> make-grid-columns();</div></pre></td></tr></table></figure>
<p>再来看一下@mixin make-container和@mixin make-row:</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//_grid.scss/mixin</span></div><div class="line">@<span class="keyword">mixin</span> make-container(<span class="variable">$gutter</span>: <span class="variable">$grid-gutter-width</span>) &#123;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">  <span class="attribute">padding-left</span>:  (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">  <span class="attribute">padding-right</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">  @<span class="keyword">include</span> clearfix();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">mixin</span> make-row(<span class="variable">$gutter</span>: <span class="variable">$grid-gutter-width</span>) &#123;</div><div class="line">  @<span class="keyword">if</span> <span class="variable">$enable-flex</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">    @<span class="keyword">include</span> clearfix();</div><div class="line">  &#125;</div><div class="line">  <span class="attribute">margin-left</span>:  (<span class="variable">$gutter</span> / -<span class="number">2</span>);</div><div class="line">  <span class="attribute">margin-right</span>: (<span class="variable">$gutter</span> / -<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>row中的负margin是对container的padding修正，为什么要这么做呢？我们可以看一下如何定义col的：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> make-col(<span class="variable">$gutter</span>: <span class="variable">$grid-gutter-width</span>) &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  @<span class="keyword">if</span> <span class="variable">$enable-flex</span> &#123;</div><div class="line">    <span class="comment">// Do nothing</span></div><div class="line">  &#125; @<span class="keyword">else</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">  &#125;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-left</span>:  (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">  <span class="attribute">padding-right</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的col也设置了padding，我们都知道列可以嵌套列，也就是说col里面可以加一层row，这样就使得col相当于一个container，从而实现嵌套，是不是很微妙？具体可以看一下<a href="http://stephenlyao.github.io/2016/03/15/bootstrap-Grid-System-Magic/" target="_blank" rel="external">这篇文章</a> .<br>我们知道bootstrap的列示通过类似<code>.col-xs-1</code>,<code>.col-sm-1</code>,<code>col-md-1</code>,<code>col-lg-1</code>…这样的类名定义的，也就是说class被分为四种分辨率，每种分辨率有12个数字，这样就有48种类名，当然除去pull,push,offset，数量是十分多的。所以为了方便编码，sass用了迭代来产生css。首先通过一个占位符设置通用属性：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Common properties for all breakpoints</span></div><div class="line">%grid-column &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="comment">// Prevent columns from collapsing when empty</span></div><div class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="comment">// Inner gutter via padding</span></div><div class="line">  <span class="attribute">padding-left</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">  <span class="attribute">padding-right</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后通过两层迭代来设置col：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$breakpoint</span> in map-keys(<span class="variable">$breakpoints</span>) &#123;</div><div class="line">  @<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$columns</span> &#123;</div><div class="line">    <span class="selector-class">.col-</span>#&#123;<span class="variable">$breakpoint</span>&#125;-#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">      @<span class="keyword">extend</span> %grid-column;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果为： </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-xs-1</span>,<span class="selector-class">.col-sm-1</span>,<span class="selector-class">.col-md-1</span>,<span class="selector-class">.col-lg-1</span>,</div><div class="line"><span class="selector-class">.col-xs-2</span>,<span class="selector-class">.col-sm-2</span>,<span class="selector-class">.col-md-2</span>,<span class="selector-class">.col-lg-2</span>,</div><div class="line"><span class="selector-class">.col-xs-3</span>,<span class="selector-class">.col-sm-3</span>,<span class="selector-class">.col-md-3</span>,<span class="selector-class">.col-lg-3</span>,</div><div class="line"><span class="selector-class">.col-xs-4</span>,<span class="selector-class">.col-sm-4</span>,<span class="selector-class">.col-md-4</span>,<span class="selector-class">.col-lg-4</span>,</div><div class="line"><span class="selector-class">.col-xs-5</span>,<span class="selector-class">.col-sm-5</span>,<span class="selector-class">.col-md-5</span>,<span class="selector-class">.col-lg-5</span>,</div><div class="line"><span class="selector-class">.col-xs-6</span>,<span class="selector-class">.col-sm-6</span>,<span class="selector-class">.col-md-6</span>,<span class="selector-class">.col-lg-6</span>,</div><div class="line"><span class="selector-class">.col-xs-7</span>,<span class="selector-class">.col-sm-7</span>,<span class="selector-class">.col-md-7</span>,<span class="selector-class">.col-lg-7</span>,</div><div class="line"><span class="selector-class">.col-xs-8</span>,<span class="selector-class">.col-sm-8</span>,<span class="selector-class">.col-md-8</span>,<span class="selector-class">.col-lg-8</span>,</div><div class="line"><span class="selector-class">.col-xs-9</span>,<span class="selector-class">.col-sm-9</span>,<span class="selector-class">.col-md-9</span>,<span class="selector-class">.col-lg-9</span>,</div><div class="line"><span class="selector-class">.col-xs-10</span>,<span class="selector-class">.col-sm-10</span>,<span class="selector-class">.col-md-10</span>,<span class="selector-class">.col-lg-10</span>,</div><div class="line"><span class="selector-class">.col-xs-11</span>,<span class="selector-class">.col-sm-11</span>,<span class="selector-class">.col-md-11</span>,<span class="selector-class">.col-lg-11</span>,</div><div class="line"><span class="selector-class">.col-xs-12</span>,<span class="selector-class">.col-sm-12</span>,<span class="selector-class">.col-md-12</span>,<span class="selector-class">.col-lg-12</span> </div><div class="line">&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提取出公共属性后，我们需要将其分配到不同分辨率，是怎么做的呢，这里十分巧妙：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">%grid-column &#123;</div><div class="line">   <span class="attribute">position</span>: relative;</div><div class="line">   <span class="comment">// Prevent columns from collapsing when empty</span></div><div class="line">   <span class="attribute">min-height</span>: <span class="number">1px</span>;</div><div class="line">   <span class="comment">// Inner gutter via padding</span></div><div class="line">   <span class="attribute">padding-left</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line">   <span class="attribute">padding-right</span>: (<span class="variable">$gutter</span> / <span class="number">2</span>);</div><div class="line"> &#125;</div><div class="line"> @<span class="keyword">each</span> <span class="variable">$breakpoint</span> in map-keys(<span class="variable">$breakpoints</span>) &#123;</div><div class="line">   @<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$columns</span> &#123;</div><div class="line">     <span class="selector-class">.col-</span>#&#123;<span class="variable">$breakpoint</span>&#125;-#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">       @<span class="keyword">extend</span> %grid-column;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">   @<span class="keyword">include</span> media-breakpoint-up(<span class="variable">$breakpoint</span>) &#123;</div><div class="line">     <span class="comment">// Work around cross-media @extend (https://github.com/sass/sass/issues/1050)</span></div><div class="line">     %grid-column-<span class="attribute">float</span>-#&#123;<span class="variable">$breakpoint</span>&#125; &#123;</div><div class="line">       @<span class="keyword">if</span> <span class="variable">$enable-flex</span> &#123;</div><div class="line">         <span class="comment">// Do nothing</span></div><div class="line">       &#125; @<span class="keyword">else</span> &#123;</div><div class="line">         <span class="attribute">float</span>: left;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">     @<span class="keyword">for</span> <span class="variable">$i</span> from 1 through <span class="variable">$columns</span> &#123;</div><div class="line">       <span class="selector-class">.col-</span>#&#123;<span class="variable">$breakpoint</span>&#125;-#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">         @<span class="keyword">extend</span> %grid-column-float-#&#123;<span class="variable">$breakpoint</span>&#125;;</div><div class="line">         @<span class="keyword">include</span> make-col-span(<span class="variable">$i</span>, <span class="variable">$columns</span>);</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>可以看出，它是在遍历分辨率尺寸的基础上，使用定义好的<code>media-breakpoint-up</code>的mixin再进行迭代，这里值得注意的一点是，由于之前我们已经生成了<code>.col-#{$breakpoint}-#{$i}</code>的基本属性，所以在进行查询媒体迭代时，<code>@extend %grid-colum-float-#{$breakpoint}</code>会附加在原有的基本属性上。这样就把各种类名分配到了相应的媒体查询上。<br>当然除此之外，还有push、pull、offset之类的其实也差不多，这里就不再重复了。除此之外有一点人们容易忽略的地方是，Grid系统是基于border-box，这点是实现Grid魔法的关键之一：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*,</div><div class="line">*<span class="selector-pseudo">:before</span>,</div><div class="line">*<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、normalize-css"><a href="#三、normalize-css" class="headerlink" title="三、normalize.css"></a>三、normalize.css</h3><p>&ensp;&ensp;&ensp;&ensp;Bootstrap中使用<a href="https://github.com/necolas/normalize.css" target="_blank" rel="external">normalize.css</a>来初始化样式。之前我一直使用<a href="http://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="external">reset.css</a>来重置浏览器的默认样式，而normalize.css是reset.css的一种替代方案。之所称其为替代方案，作者<a href="https://github.com/necolas" target="_blank" rel="external">necolas</a>介绍时已经把其说的很清楚了：  </p>
<blockquote>
<ul>
<li>保护有用的浏览器默认样式而不是完全去掉它们</li>
<li>一般化的样式：为大部分HTML元素提供</li>
<li>修复浏览器自身的bug并保证各浏览器的一致性</li>
<li>优化CSS可用性：用一些小技巧</li>
<li>解释代码：用注释和详细的文档来</li>
</ul>
</blockquote>
<p>简单点说，它和reset.css不同之处在于：     </p>
<ul>
<li>Reset是相对‘暴力’的，不管你有用没用，都重置成统一的样式，所有东西都必须一致。  </li>
<li>normalize.css却是相对‘平和’的，不求样式一致,尽量保留浏览器的默认样式，尽量不进行太多的重置。  </li>
</ul>
<p>举个简单的栗子，对于简单的一个 <strong>h1</strong> 标签来说，reset.css可能会做很多事：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reset.css</span></div><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</div><div class="line"> <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</div><div class="line"> <span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</div><div class="line"> <span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</div><div class="line"> <span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</div><div class="line"> <span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</div><div class="line"> <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</div><div class="line"> <span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</div><div class="line"> <span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</div><div class="line"> <span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">embed</span>, </div><div class="line"> <span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </div><div class="line"> menu, <span class="selector-tag">nav</span>, <span class="selector-tag">output</span>, <span class="selector-tag">ruby</span>, <span class="selector-tag">section</span>, summary,</div><div class="line"> <span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</div><div class="line"> 	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"> 	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"> 	<span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line"> 	<span class="attribute">font-size</span>: <span class="number">100%</span>;</div><div class="line"> 	<span class="attribute">font</span>: inherit;</div><div class="line"> 	<span class="attribute">vertical-align</span>: baseline;</div><div class="line"> &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>而nomalize.css只是这样做：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Address variable `h1` font-size and margin within `section` and `article`</span></div><div class="line"><span class="comment">// contexts in Firefox 4+, Safari, and Chrome.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.67em</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以很轻易的看出其中思想上的差别，也就是说，normalize.css的优势在于它保持了许多浏览器的默认样式，当一个元素在不同浏览器中有不同的默认值时，nomalize.css会让样式保持一致并且尽可能的与现代标准相符合；以及修复了常用的桌面端和移动端浏览器的bug，比如HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。  </p>
<p>对于使用reset.css还是normalize.css，仁者见仁智者见智吧。  </p>
<h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>Bootstrap在设计上是非常注重模块化以及层次化的，一方面是利于维护，另一方面提高了可复用性，这点非常值得学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://getbootstrap.com/2.3.2/&quot; target=&quot;_blank&quot; rel=&quot;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>［译］Vertical-align你应该知道的事</title>
    <link href="http://yoursite.com/2016/01/12/Vertical-Align-%20All%20You%20Need%20To%20Know/"/>
    <id>http://yoursite.com/2016/01/12/Vertical-Align- All You Need To Know/</id>
    <published>2016-01-12T09:02:18.000Z</published>
    <updated>2016-12-08T07:23:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="http://christopheraue.net/2014/03/05/vertical-align/#inline-block-element" target="_blank" rel="external">Vertical-Align: All You Need To Know</a><br>原文作者: <a href="https://twitter.com/christopheraue" target="_blank" rel="external">Christopher Aue</a></p>
</blockquote>
<h1 id="关于Vertical-Align你应该知道的事"><a href="#关于Vertical-Align你应该知道的事" class="headerlink" title="关于Vertical-Align你应该知道的事"></a>关于Vertical-Align你应该知道的事</h1><p>我经常会碰到将元素在垂直方向上对齐的需求。</p>
<p>CSS提供了一些可能的方法:有时我会用<code>float</code>来解决这个问题,有时会使用<code>position:absolute</code>,有时甚至不惜手动调整<code>margins</code>或者<code>paddings</code>(这是一件十分dirty的做法)。</p>
<p>实话说我非常不喜欢这些解决方式。浮动只在其顶部对齐并且需要手动清除浮动。绝对定位会使元素脱离文档流,以至于它们不再影响它们周边的元素。对于使用固定的margins和paddings来说即使只是一些微小的变化,那也将成为一场灾难。</p>
<p>但是这里有另一个杀伤力武器:<code>vertical-align</code>。我认为它值得这个称赞。好吧,从技术角度上讲,使用<code>vertical-align</code>来布局其实是一种hack,原因是它存在并不是为了布局。而是为了使文本元素和与相邻的元素在垂直方向上对齐。尽管如此,在不同的上下文你依然可以非常灵活和细粒化的使用<code>vertical-align</code>来对齐元素。元素的尺寸可以不需要知道,因为元素没有脱离文档流,所以其它元素可以对那些改变的尺寸作出反应。这将使他在布局时成为一个有价值的选择。</p>
<h2 id="Vertical-Align的奇特之处"><a href="#Vertical-Align的奇特之处" class="headerlink" title="Vertical-Align的奇特之处"></a>Vertical-Align的奇特之处</h2><p>尽管如此,<code>vertical-align</code>有时候可能是面目狰狞的。使用它会令人有点泄气:在它的内部工作机制中似乎有一些神秘的规则。比如有一种很可能发生的情况便是,当你改变了某个元素的<code>vertical-align</code>属性,实际上并没有改变它的对齐方式,但别的元素却发生了变化!</p>
<p>不幸的是,当今大部分有关这方面的资料深入程度都不够。尤其是当我们想用<code>vertical-align</code>来布局的时候。这些资料更多的是将注意力集中在一个误解的概念上-尝试着垂直对齐一个元素内的任何内容。他们仅仅给出基本的介绍以及解释在一些十分简单的情况下元素是如何对齐的。他们并不解释复杂的部分。</p>
<p>所以,我给自己设定了一个目标– <strong>彻彻底底的弄清楚vertical-align的行为</strong> 。我参考了W3C上的CSS规范以及试验了一些例子最终结束了这项任务。这篇文章便是我研究的成果。</p>
<p>那么,让我们来弄清楚这个游戏规则吧!</p>
<h2 id="使用Vertical-align的要求"><a href="#使用Vertical-align的要求" class="headerlink" title="使用Vertical-align的要求"></a>使用Vertical-align的要求</h2><p><code>vertical-align</code>被用于对齐<code>inline</code>元素。这些元素,也就是<code>display</code>属性为<code>inline</code>和<code>inline-block</code>,而<code>inline-table</code>的元素不在本文讨论的范围内。<br><strong>Inline</strong>元素基本上指的就是文本。</p>
<p><strong>Inline-block</strong>元素顾名思义,同时具备inline以及block元素的特性。这样的元素具有宽度和高度(可能是由内容高度决定),同样还具有padding,margin,boreder。<br>inline元素一个一个挨着摆放在行内。一旦元素太多而超出该行,则一个新行会被创建出来,这些行便是所谓的<strong>line-box</strong>。它会将行内所有的内容包裹起来。不同大小的内容,line-box的行内高度也会不同。下图画的红线代表了line-box的上下边界。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/火狐截图_2015-12-06T04-18-06.808Z.png" alt="">  </p>
<p>在这些line-box里<code>vertical-align</code>属性负责对齐那些独立的元素。<strong>那么,这些元素是和谁对齐呢?</strong>  </p>
<h2 id="关于Baselines和边界"><a href="#关于Baselines和边界" class="headerlink" title="关于Baselines和边界"></a>关于Baselines和边界</h2><p>关于垂直对齐最重要的一点便是相关元素的baseline。有些情况元素盒模型的上下边界也十分重要。让我们来看看每个相关元素中baseline和边界所在的位置。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/火狐截图_2015-12-06T05-38-14.546Z.png" alt=""><br>上图你可以看到有并排的三行文字。行高的上下边界用红线标出,文字高度用的是绿线,baseline便是蓝线了。左图行高和文字高度一致,所以绿线和红线重合了。中间图行高是文字大小的两倍。右边行高是文字大小的二分之一。<br>行内元素的外界在行高的上下边缘这个范围内对齐。如果行高小于文字高度也无所谓。<br>什么是baseline呢?简单粗暴的说,baseline就是文字高度中线下方的一条线。具体可以看W3C上的介绍<a href="http://www.w3.org/TR/CSS2/visudet.html#leading" title="标准链接" target="_blank" rel="external">标准链接</a>。  </p>
<p><strong>inline-block元素</strong><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/火狐截图_2015-12-06T07-16-44.376Z.png" alt=""><br>从左到右你可以看到三个<code>inline-block</code>元素:左边是没有脱离文档流的内容c,中间是没有脱离文档流的内容c并且<code>overflow:hidden</code>,右边是没有内容但是内容有高度。margin-box的边界是用红线标出,黄色是border,绿色是padding,蓝色是content。蓝色的线代表的是元素的baseline。<br><code>inline-block</code>元素的边界就是<a href="http://www.w3.org/TR/CSS2/box.html#x17" target="_blank" rel="external">margin-box</a>的上下边界。  </p>
<p><code>inline-block</code>元素的baseline取决于该元素是否具有处于正常流的内容,具体分以下三种情况:  </p>
<ul>
<li>在具有处于文档流的内容的情况下,<code>inline-block</code>元素的baseline就是最后一个内容元素的baseline(如上图左边)。这个元素的baseline的确定根据去自身规则确定。  </li>
<li>在具有处于文档流的内容并且<code>overflow</code>属性的值不为<code>visible</code>的情况下,baseline便是margin-box的下边界(如上图中间)。因此它也是inline-block的下边界。  </li>
<li>在不具有处于文档流的内容情况下,baseline同样也是margin-box的下边界。  </li>
</ul>
<p><strong>Line box</strong><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/火狐截图_2015-12-12T08-48-08.364Z.png" alt=""><br>关于line-box的图上面已经说过了。这次我将linebox的内容的上下边界(绿线)以及baseline(蓝线)画了出来。同样将内容元素用灰色背景高亮了出来。<br>line-box的上边界和最高元素的上边界对齐,下边界和最低元素的下边界对齐。  </p>
<p><strong>line-box的baseline是不确定的</strong>  </p>
<article>CSS2.1 does not define the position of the line box’s baseline   ——the W3C Specs*</article>   


<p>这也是当我们使用vertical-align时最令人疑惑的地方。这意味着baseline的位置受其他条件比如vertical-align的值以及让line-box高度最小的影响。这是一个很灵活的参数。 </p>
<p>因为line-box的baseline是不可见得,所以可能不能一眼就看出来它在那。不过,你可以很轻易的将它可视化出来。只需要在行的开头添加一个字母。比如添加一个’x’。如果这个字母没有被其他方法来对齐,那么它的下边界默认就是baseline的位置。  </p>
<p>在line-box中围绕着baseline会形成text-box。text-box可以简单的被认为是没有和line-box中任何元素对齐的inline元素。它的高度与父元素font-size的值相等。因此,text-box仅仅包含非格式化的line-box文本。text-box的边界由绿线来表示。因为text-box和baseline是绑定的,当baseline位置发生变化时它的位置也会发生变化。(这里所说的text-box在W3C标准中被叫做<a href="http://www.w3.org/TR/CSS2/visudet.html#strut" target="_blank" rel="external">strut</a>。)  </p>
<p>hu~这部分比较难理解。让我们总结一下最重要的两点:      </p>
<ul>
<li>有一个叫<em>line-box</em>的区域,垂直方向的对齐都发生在这个区域里。它有baseline,text-box以及上下边界。  </li>
<li>inline元素是我们需要对其的对象,他们有baseline和上下边界。   </li>
</ul>
<h2 id="Vertical-Align的值"><a href="#Vertical-Align的值" class="headerlink" title="Vertical-Align的值"></a>Vertical-Align的值</h2><p><img src="http://7xl0rs.com1.z0.glb.clouddn.com/310677093-552620eb1da7d.png" alt=""><br>关于Vertical-align的值具体可以看MDN  </p>
<h2 id="Vertical-Align是如何发挥它的作用的呢"><a href="#Vertical-Align是如何发挥它的作用的呢" class="headerlink" title="Vertical-Align是如何发挥它的作用的呢"></a>Vertical-Align是如何发挥它的作用的呢</h2><p>我们现在可以更加深入的了解在某些情况下元素是如何垂直对齐的。  </p>
<h4 id="对齐一个Icon"><a href="#对齐一个Icon" class="headerlink" title="对齐一个Icon"></a>对齐一个Icon</h4><p>这里有一个问题：我想将一个icon与相邻的文本对齐。仅仅将icon的vertical-align属性的值设置为middle并不是一个令人满意的方法。看一下例子：<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/3207176454-552622437bff3.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获.PNG" alt="">   </p>
<p>下面给出上图的辅助线版本:<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/1480687358-5526230af1f75.png" alt="">  </p>
<p>这揭示了我们的问题。因为左图的文本根本没有发生对齐行为，它还是和line-box的baseline对齐。而vertical-align对齐的点是baseline加上半个x的距离(half of the x-height)。因此文字的最高点超过了icon的高度。<br>右图所示，文字与icon对齐与一个中点。文字的baseline稍微低于line-box的baseline。结果文字很好的和icon对齐了。  </p>
<p>####关于Line-box的baseline的移动问题<br>这是一个使用<code>vertical-align</code>常有的坑：line-box里的所有元素都会影响到baseline的位置。让我们假设一下，如果一个元素通过某种方法对齐了，但是line-box的baseline不得不因此移动。因为大部分对齐方式（除了top和bottom）都和baseline有关，因此这个元素的对齐会导致行内其他元素的调整。<br>下面是一些例子：  </p>
<ul>
<li>如果有一个高度可以占满整个line-box高度的元素，那么vertical-align对它是没有影响的。在它的top以上和bottom以下没有空间可以使它移动。为了满足它的vertical-align的值，line-box的baseline需要移动。下图矮盒子的<code>vertical-align:baseline</code>,左边的高盒子取值为<code>text-bottom</code>,右边为<code>text-top</code>，你可以看到矮盒子随着baseline跳了上去。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/3321562939-552a393f0f532.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获1.PNG" alt=""><br>当把高元素的vertical-align属性设置成其他值的时候，表现的行为是一样的。  </li>
<li>甚至将<code>vertical-align</code>设置成<code>bottom</code>（left）和<code>top</code>（right）也会移动baseline。这很奇怪，因为这应该和baseline并没有什么关系。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/3321562939-552a393f0f532.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获3.PNG" alt=""></li>
<li>将两个更大的元素放在一行里，然后设置vertical-align的值使其的baseline移动以至于让他们对齐。接着line-box的高度会自动调整。添加第三个元素，这个元素如果不超过line-box的边界，则它不影响line-box的高度以及baseline的位置。如果该元素<em>超过</em>了line-box的边缘，则line-box的高度以及baseline都会调整。在这种情况下，另外两个元素的位置发生了下移。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/877914604-552a3f2c8aaf5.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获4.PNG" alt="">  </li>
</ul>
<h4 id="inline元素下方可能会有点间隙"><a href="#inline元素下方可能会有点间隙" class="headerlink" title="inline元素下方可能会有点间隙"></a>inline元素下方可能会有点间隙</h4><p> 来看一个例子。一个常见的情况就是你尝试将列表的<code>li</code>元素垂直对齐。<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/2778514088-552a3fbaada4b.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获6.PNG" alt="">  </p>
<p> 正如你所看到的，<code>li</code>元素是对齐baseline的。baseline的下方会有一部分留给文字的空间。这便会产生小缝隙。那么解决方案是什么？只要改变line-box的baseline的位置就好了，比如把<code>li</code>元素的<code>vertical-align:middle</code>.<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获7.PNG" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获6.PNG" alt="">  </p>
<p>####inline元素之间的间隙会破坏布局效果<br>这主要是inline元素自身的问题。但是因为这是让vertical-align发挥作用的必要因素，所以了解它也是不错的。 </p>
<p>这个间隙主要是来源于inline元素之间的空格。所有空白都会变成一个空格。这个空格可以通过该方法反映，比如如果你想让两个inline元素紧挨着，然后给他们的宽度分别设置为50%，这里并没有足够的空间存放两个宽度为50%的元素以及一个空格。所以一行便会被破坏成两行。为了移除空隙，我需要移除空格，解决方案如下：<br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/1169658073-552a41cb7252a.png" alt=""><br><img src="http://7xl0rs.com1.z0.glb.clouddn.com/捕获8.PNG" alt="">  </p>
<h2 id="Vertical-align揭秘"><a href="#Vertical-align揭秘" class="headerlink" title="Vertical-align揭秘"></a>Vertical-align揭秘</h2><p>是的，对于你来说了解这些规则并不复杂。如果vertical-align不起作用，那么想想看这两个问题：  </p>
<ul>
<li>line-box的baseline以及上下边缘位置在哪里？  </li>
</ul>
<ul>
<li>inline元素的baseline以及上下边缘在哪里？</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://christopheraue.net/2014/03/05/vertical-align/#inline-block-element&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vert
    
    </summary>
    
    
      <category term="translation" scheme="http://yoursite.com/tags/translation/"/>
    
  </entry>
  
</feed>
